{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to VideoAlchemy","text":"<p>VideoAlchemy is a cutting-edge video processing toolkit designed to simplify the complexity of FFmpeg by using an intuitive YAML-based configuration. Whether you're a content creator, streamer, or developer, VideoAlchemy provides powerful tools to streamline your video processing workflows.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Readable and Organized: Rather than memorizing FFmpeg\u2019s complex flags and options, VideoAlchemy allows you to clearly define inputs, outputs, codecs, and filters in an intuitive format.</li> <li>Command Sequencing: Define dependencies between tasks using the run_after feature to ensure commands execute in the desired order.</li> <li>Error Prevention: YAML validation ensures that FFmpeg commands are correctly formed, preventing errors early in your workflow and saving time.</li> </ul>"},{"location":"#future-enhancements","title":"Future Enhancements","text":"<p>At VideoAlchemy, we are constantly improving and expanding our toolkit to meet the evolving needs of our users. Here\u2019s what we have in store:</p> <ul> <li>Integration with AI Models/Services: We plan to offer automatic video enhancement, noise reduction, and smart video editing through AI-powered features.</li> <li>Toolkit for Streamers and YouTubers: Specialized tools like custom overlays, real-time streaming enhancements, and optimized formats for platforms like Twitch and YouTube.</li> <li>Cloud Storage Integration: Future updates will allow seamless integration with cloud storage solutions such as AWS S3, Azure, and Minio.</li> </ul>"},{"location":"#support-as-a-sponsor","title":"Support as a Sponsor","text":"<p>We believe in keeping VideoAlchemy open, accessible, and constantly evolving. However, maintaining and enhancing this toolkit takes time, effort, and resources. If you\u2019ve found VideoAlchemy helpful, we kindly invite you to consider supporting its development.</p>"},{"location":"#why-your-support-matters","title":"Why Your Support Matters:","text":"<ul> <li>Sustained Innovation: Your contributions directly help us continue improving VideoAlchemy, bringing exciting new features and regular updates to the community.</li> <li>Empowering Creators: Every donation allows us to focus on enhancing tools for streamers, YouTubers, and video professionals, ensuring that VideoAlchemy meets your needs now and in the future.</li> <li>Keeping It Open-Source: By donating, you help us keep VideoAlchemy free for everyone, enabling creators and developers around the world to access powerful video processing without barriers. Every contribution, no matter the size, makes a big difference. If VideoAlchemy has saved you time, simplified your workflow, or empowered your creativity, please consider giving back. Your generosity helps us make this project the best it can be.</li> </ul> <p>Thank you for being part of the VideoAlchemy community. Together, we can continue building something amazing.</p> <p>Sponsor us here and play a pivotal role in shaping the future of VideoAlchemy.</p>"},{"location":"compose-file-references/","title":"Compose File References","text":""},{"location":"compose-file-references/#version","title":"Version","text":"<p>The <code>version</code> attribute specifies the version of the <code>viddo-compose</code> schema being used.</p> <pre><code>version: 0.1  # The version of the viddo-compose schema\n</code></pre>"},{"location":"compose-file-references/#generate-path","title":"Generate Path","text":"<p>The <code>generate_path</code> attribute specifies the path where generated files will be stored.</p> <pre><code>generate_path: \"./sample/generated\"  # The path where generated files will be stored\n</code></pre>"},{"location":"compose-file-references/#tasks","title":"Tasks","text":"<p>The <code>tasks</code> attribute is a list of tasks to be executed. Each task specifies the command to run, the inputs, outputs, and any codecs or filters to apply.</p>"},{"location":"compose-file-references/#task-parameters","title":"Task Parameters","text":""},{"location":"compose-file-references/#name","title":"Name","text":"<p>The <code>name</code> attribute specifies the name of the task.</p> <pre><code>name: My Task  # Name of the task\n</code></pre>"},{"location":"compose-file-references/#command","title":"Command","text":"<p>The <code>command</code> attribute specifies the command to be executed. For FFmpeg, this is typically <code>ffmpeg</code>.</p> <pre><code>command: ffmpeg  # Command to be executed\n</code></pre>"},{"location":"compose-file-references/#inputs","title":"Inputs","text":"<p>The <code>inputs</code> attribute is a list of input files for the task.</p> <pre><code>inputs:\n  - id: input_1  # Identifier for the input\n    source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'  # Path to the input file\n    output_id: output_1  # Reference to another output as an input\n    realtime: false  # Whether the input is real-time\n    format: mp4  # Format of the input file\n</code></pre> <ul> <li><code>id</code>: Identifier for the input. Any non-empty string.</li> <li><code>source</code>: Path to the input file. Corresponds to the <code>-i</code> parameter in FFmpeg. Any valid file, rtmp, rtsp, etc.</li> <li><code>output_id</code>: Reference to another output as an input. Any valid output ID from other tasks that listed in <code>run_after</code> attribute.</li> <li><code>realtime</code>: Whether the input is real-time. values are <code>true</code> or <code>false</code>.</li> <li><code>format</code>: Format of the input file. available values are:</li> </ul> <p><code>3dostr</code>, <code>4xm</code>, <code>aa</code>, <code>aac</code>, <code>aax</code>, <code>acm</code>, <code>act</code>, <code>adf</code>, <code>adp</code>, <code>ads</code>, <code>aea</code>, <code>afc</code>, <code>aix</code>, <code>alias_pix</code>, <code>amrnb</code>, <code>amrwb</code>, <code>anm</code>, <code>apc</code>, <code>ape</code>, <code>aqtitle</code>, <code>argo_brp</code>, <code>asf_o</code>, <code>au</code>, <code>av1</code>, <code>avi</code>, <code>avr</code>, <code>avs</code>, <code>bethsoftvid</code>, <code>bfi</code>, <code>bfstm</code>, <code>bin</code>, <code>bink</code>, <code>binka</code>, <code>brstm</code>, <code>c93</code>, <code>cdg</code>, <code>cdxl</code>, <code>cine</code>, <code>concat</code>, <code>cri_pipe</code>, <code>dcstr</code>, <code>dds_pipe</code>, <code>derf</code>, <code>dfa</code>, <code>dhav</code>, <code>dpx_pipe</code>, <code>dsf</code>, <code>dsicin</code>, <code>dss</code>, <code>dvbsub</code>, <code>dvbtxt</code>, <code>dxa</code>, <code>ea</code>, <code>ea_cdata</code>, <code>epaf</code>, <code>exr_pipe</code>, <code>flic</code>, <code>frm</code>, <code>fsb</code>, <code>fwse</code>, <code>g729</code>, <code>gdv</code>, <code>gem_pipe</code>, <code>genh</code>, <code>gif_pipe</code>, <code>hca</code>, <code>hcom</code>, <code>hnm</code>, <code>idcin</code>, <code>idf</code>, <code>iff</code>, <code>ifv</code>, <code>imf</code>, <code>ingenient</code>, <code>ipmovie</code>, <code>ipu</code>, <code>iss</code>, <code>iv8</code>, <code>ivr</code>, <code>j2k_pipe</code>, <code>jpeg_pipe</code>, <code>jpegls_pipe</code>, <code>jpegxl_pipe</code>, <code>jv</code>, <code>kux</code>, <code>lavfi</code>, <code>libgme</code>, <code>live_flv</code>, <code>lmlm4</code>, <code>loas</code>, <code>luodat</code>, <code>lvf</code>, <code>lxf</code>, <code>mca</code>, <code>mcc</code>, <code>mgsts</code>, <code>mjpeg_2000</code>, <code>mlv</code>, <code>mm</code>, <code>mods</code>, <code>moflex</code>, <code>mov</code>, <code>mp4</code>, <code>m4a</code>, <code>3gp</code>, <code>3g2</code>, <code>mj2</code>, <code>mpc</code>, <code>mpc8</code>, <code>mpegtsraw</code>, <code>mpegvideo</code>, <code>mpl2</code>, <code>mpsub</code>, <code>msf</code>, <code>msnwctcp</code>, <code>msp</code>, <code>mtaf</code>, <code>mtv</code>, <code>musx</code>, <code>mv</code>, <code>mvi</code>, <code>mxg</code>, <code>nc</code>, <code>nistsphere</code>, <code>nsp</code>, <code>nsv</code>, <code>paf</code>, <code>pam_pipe</code>, <code>pbm_pipe</code>, <code>pcx_pipe</code>, <code>pfm_pipe</code>, <code>pgm_pipe</code>, <code>pgmyuv_pipe</code>, <code>pgx_pipe</code>, <code>phm_pipe</code>, <code>photocd_pipe</code>, <code>pictor_pipe</code>, <code>pjs</code>, <code>pmp</code>, <code>png_pipe</code>, <code>pp_bnk</code>, <code>ppm_pipe</code>, <code>psd_pipe</code>, <code>psxstr</code>, <code>pva</code>, <code>pvf</code>, <code>qcp</code>, <code>qdraw_pipe</code>, <code>qoi_pipe</code>, <code>r3d</code>, <code>realtext</code>, <code>redspark</code>, <code>rl2</code>, <code>rpl</code>, <code>rsd</code>, <code>sami</code>, <code>sbg</code>, <code>scd</code>, <code>sdp</code>, <code>sdr2</code>, <code>sds</code>, <code>sdx</code>, <code>ser</code>, <code>sga</code>, <code>sgi_pipe</code>, <code>shn</code>, <code>siff</code>, <code>simbiosis_imx</code>, <code>sln</code>, <code>smk</code>, <code>smush</code>, <code>sol</code>, <code>stl</code>, <code>subviewer</code>, <code>subviewer1</code>, <code>sunrast_pipe</code>, <code>svag</code>, <code>svg_pipe</code>, <code>svs</code>, <code>tak</code>, <code>tedcaptions</code>, <code>thp</code>, <code>tiertexseq</code>, <code>tiff_pipe</code>, <code>tmv</code>, <code>tty</code>, <code>txd</code>, <code>ty</code>, <code>v210</code>, <code>v210x</code>, <code>vag</code>, <code>vbn_pipe</code>, <code>vividas</code>, <code>vivo</code>, <code>vmd</code>, <code>vobsub</code>, <code>vpk</code>, <code>vplayer</code>, <code>vqf</code>, <code>wc3movie</code>, <code>webp_pipe</code>, <code>wsd</code>, <code>wsvqa</code>, <code>wve</code>, <code>x11grab</code>, <code>xa</code>, <code>xbin</code>, <code>xmv</code>, <code>xpm_pipe</code>, <code>xvag</code>, <code>xwd_pipe</code>, <code>xwma</code>, <code>yop</code>, <code>video4linux2</code>, <code>v4l2</code></p>"},{"location":"compose-file-references/#outputs","title":"Outputs","text":"<p>The <code>outputs</code> attribute is a list of output files for the task.</p> <pre><code>outputs:\n  - id: output_1  # Identifier for the output\n    overwrite: true  # Whether to overwrite the output file if it exists\n    source: 'sample/outputs/output.mp4'  # Path to the output file\n    format: mp4  # Format of the output file\n    start_number: 0  # Starting number for the output file\n    length: 10  # Length of the output file sequence\n</code></pre> <ul> <li><code>id</code>: Identifier for the output. Any non-empty string.</li> <li><code>overwrite</code>: Whether to overwrite the output file if it exists. values are <code>true</code> or <code>false</code>.</li> <li><code>source</code>: Path to the output file. Any valid file path. Any valid file, rtmp, rtsp, etc.</li> <li><code>format</code>: Format of the output file. available values are:</li> </ul> <p><code>3dostr</code>, <code>4xm</code>, <code>aa</code>, <code>aac</code>, <code>aax</code>, <code>acm</code>, <code>act</code>, <code>adf</code>, <code>adp</code>, <code>ads</code>, <code>aea</code>, <code>afc</code>, <code>aix</code>, <code>alias_pix</code>, <code>amrnb</code>, <code>amrwb</code>, <code>anm</code>, <code>apc</code>, <code>ape</code>, <code>aqtitle</code>, <code>argo_brp</code>, <code>asf_o</code>, <code>au</code>, <code>av1</code>, <code>avi</code>, <code>avr</code>, <code>avs</code>, <code>bethsoftvid</code>, <code>bfi</code>, <code>bfstm</code>, <code>bin</code>, <code>bink</code>, <code>binka</code>, <code>brstm</code>, <code>c93</code>, <code>cdg</code>, <code>cdxl</code>, <code>cine</code>, <code>concat</code>, <code>cri_pipe</code>, <code>dcstr</code>, <code>dds_pipe</code>, <code>derf</code>, <code>dfa</code>, <code>dhav</code>, <code>dpx_pipe</code>, <code>dsf</code>, <code>dsicin</code>, <code>dss</code>, <code>dvbsub</code>, <code>dvbtxt</code>, <code>dxa</code>, <code>ea</code>, <code>ea_cdata</code>, <code>epaf</code>, <code>exr_pipe</code>, <code>flic</code>, <code>frm</code>, <code>fsb</code>, <code>fwse</code>, <code>g729</code>, <code>gdv</code>, <code>gem_pipe</code>, <code>genh</code>, <code>gif_pipe</code>, <code>hca</code>, <code>hcom</code>, <code>hnm</code>, <code>idcin</code>, <code>idf</code>, <code>iff</code>, <code>ifv</code>, <code>imf</code>, <code>ingenient</code>, <code>ipmovie</code>, <code>ipu</code>, <code>iss</code>, <code>iv8</code>, <code>ivr</code>, <code>j2k_pipe</code>, <code>jpeg_pipe</code>, <code>jpegls_pipe</code>, <code>jpegxl_pipe</code>, <code>jv</code>, <code>kux</code>, <code>lavfi</code>, <code>libgme</code>, <code>live_flv</code>, <code>lmlm4</code>, <code>loas</code>, <code>luodat</code>, <code>lvf</code>, <code>lxf</code>, <code>mca</code>, <code>mcc</code>, <code>mgsts</code>, <code>mjpeg_2000</code>, <code>mlv</code>, <code>mm</code>, <code>mods</code>, <code>moflex</code>, <code>mov</code>, <code>mp4</code>, <code>m4a</code>, <code>3gp</code>, <code>3g2</code>, <code>mj2</code>, <code>mpc</code>, <code>mpc8</code>, <code>mpegtsraw</code>, <code>mpegvideo</code>, <code>mpl2</code>, <code>mpsub</code>, <code>msf</code>, <code>msnwctcp</code>, <code>msp</code>, <code>mtaf</code>, <code>mtv</code>, <code>musx</code>, <code>mv</code>, <code>mvi</code>, <code>mxg</code>, <code>nc</code>, <code>nistsphere</code>, <code>nsp</code>, <code>nsv</code>, <code>paf</code>, <code>pam_pipe</code>, <code>pbm_pipe</code>, <code>pcx_pipe</code>, <code>pfm_pipe</code>, <code>pgm_pipe</code>, <code>pgmyuv_pipe</code>, <code>pgx_pipe</code>, <code>phm_pipe</code>, <code>photocd_pipe</code>, <code>pictor_pipe</code>, <code>pjs</code>, <code>pmp</code>, <code>png_pipe</code>, <code>pp_bnk</code>, <code>ppm_pipe</code>, <code>psd_pipe</code>, <code>psxstr</code>, <code>pva</code>, <code>pvf</code>, <code>qcp</code>, <code>qdraw_pipe</code>, <code>qoi_pipe</code>, <code>r3d</code>, <code>realtext</code>, <code>redspark</code>, <code>rl2</code>, <code>rpl</code>, <code>rsd</code>, <code>sami</code>, <code>sbg</code>, <code>scd</code>, <code>sdp</code>, <code>sdr2</code>, <code>sds</code>, <code>sdx</code>, <code>ser</code>, <code>sga</code>, <code>sgi_pipe</code>, <code>shn</code>, <code>siff</code>, <code>simbiosis_imx</code>, <code>sln</code>, <code>smk</code>, <code>smush</code>, <code>sol</code>, <code>stl</code>, <code>subviewer</code>, <code>subviewer1</code>, <code>sunrast_pipe</code>, <code>svag</code>, <code>svg_pipe</code>, <code>svs</code>, <code>tak</code>, <code>tedcaptions</code>, <code>thp</code>, <code>tiertexseq</code>, <code>tiff_pipe</code>, <code>tmv</code>, <code>tty</code>, <code>txd</code>, <code>ty</code>, <code>v210</code>, <code>v210x</code>, <code>vag</code>, <code>vbn_pipe</code>, <code>vividas</code>, <code>vivo</code>, <code>vmd</code>, <code>vobsub</code>, <code>vpk</code>, <code>vplayer</code>, <code>vqf</code>, <code>wc3movie</code>, <code>webp_pipe</code>, <code>wsd</code>, <code>wsvqa</code>, <code>wve</code>, <code>x11grab</code>, <code>xa</code>, <code>xbin</code>, <code>xmv</code>, <code>xpm_pipe</code>, <code>xvag</code>, <code>xwd_pipe</code>, <code>xwma</code>, <code>yop</code>, <code>video4linux2</code>, <code>v4l2</code></p> <ul> <li><code>start_number</code>: Starting number for the output file. Any non-negative integer.</li> <li><code>length</code>: Length of the output file sequence. Any non-negative integer.</li> </ul>"},{"location":"compose-file-references/#codecs","title":"Codecs","text":"<p>The <code>codecs</code> attribute specifies the codecs and filters to apply.</p> <pre><code>codecs:\n  - input_id: input_1  # Identifier for the input\n    output_id: output_1  # Identifier for the output\n  - codec_name:\n      audio: aac  # Audio codec\n      video: libx264  # Video codec\n    stream_loop: 1  # Number of times to loop the stream\n    shortest: true  # Stop encoding when the shortest input stream ends\n    preset: medium  # Preset for encoding speed\n    crf: 23  # Constant Rate Factor for quality\n    profile:\n      video: high  # Video profile\n      audio: aac_low  # Audio profile\n    level: 4.1  # Level for encoding\n    pixel_format: yuv420p  # Pixel format\n    max_rate: 5000k  # Maximum bitrate\n    buffer_size: 10000k  # Buffer size\n    constant_bitrate:\n      video: 4000k  # Constant video bitrate\n      audio: 128k  # Constant audio bitrate\n    file_size: 1000000  # Target file size\n    audio_quality: 5  # Audio quality\n    pass: 2  # Number of encoding passes\n    audio_none: false  # No audio encoding\n    video_none: false  # No video encoding\n    move_flags: [faststart, frag_keyframe]  # Flags for moving the file\n    metadata:\n      - key: title  # Metadata key\n        value: Sample Video  # Metadata value\n    video_filters:\n      - name: scale  # Video filter name\n        value: 1280:720  # Video filter value\n    audio_filters:\n      - name: volume  # Audio filter name\n        value: 1.5  # Audio filter value\n    time_part:\n      start_time: 00:00:10  # Start time for trimming\n      duration_time: 00:00:30  # Duration for trimming\n    concat_files:\n      - source: part1.mp4  # Source file for concatenation\n        duration: 10  # Duration of the segment\n        in_point: 0  # In point for the segment\n        out_point: 10  # Out point for the segment\n    sync:\n      audio: 1  # Audio sync method\n      video: passthrough  # Video sync method\n    frame:\n      video: 30  # Video frame rate\n      audio: 44100  # Audio sample rate\n    quality:\n      video: 23  # Video quality\n      audio: 5  # Audio quality\n    input_framerate: 30  # Input frame rate\n    framerate: 30  # Output frame rate\n    gop_size: 60  # Group of pictures size\n    audio_sampling_rate: 44100  # Audio sampling rate\n    hls:\n      time: 10  # Segment duration for HLS\n      list_size: 5  # Number of segments in the playlist\n      segment_filename: segment_%03d.ts  # Segment filename pattern\n      playlist_type: vod  # Playlist type\n      segment_type: mpegts  # Segment type\n      flags: [delete_segments]  # HLS flags\n      master_playlist_name: master.m3u8  # Master playlist name\n      segment_list: segment_list.m3u8  # Segment list file\n      segment_list_size: 5  # Size of the segment list\n      max_entries: 10  # Maximum number of entries\n      allow_cache: true  # Allow caching\n      key_info_file: key_info.txt  # Key info file\n      key_url: http://example.com/key  # Key URL\n    channels: 2  # Number of audio channels\n    channel_layout: stereo  # Audio channel layout\n    variant_stream_map: v:0,a:0  # Variant stream map\n    map_input: true  # Map input streams\n</code></pre> <ul> <li><code>input_id</code>: Identifier for the input. not required. using for map codec to one of inputs.</li> <li><code>output_id</code>: Identifier for the output. not required. using for map codec to one of outputs.</li> <li><code>codec_name</code>: Specifies the codec to use. Corresponds to the <code>-c:v</code> and <code>-c:a</code> parameters in FFmpeg.</li> <li><code>audio</code>: Corresponds to the <code>-c:a</code> parameter in FFmpeg. Available values: <code>aac</code>, <code>ac3</code>, <code>mp3</code>, <code>opus</code>, <code>vorbis</code>, <code>flac</code>, <code>alac</code>, <code>pcm_s16le</code>, <code>pcm_s24le</code>, <code>pcm_s32le</code>, <code>pcm_f32le</code>, <code>pcm_f64le</code>, <code>pcm_mulaw</code>, <code>pcm_alaw</code>, <code>pcm_s8</code>, <code>pcm_u8</code>, <code>libmp3lame</code>, <code>libopus</code>, <code>libvorbis</code>, <code>copy</code>.</li> <li><code>video</code>: Corresponds to the <code>-c:v</code> parameter in FFmpeg. Available values: <code>libx264</code>, <code>libx265</code>, <code>mpeg2video</code>, <code>libvpx-vp9</code>, <code>gif</code>, <code>libvpx</code>, <code>libaom-av1</code>, <code>mpeg1video</code>, <code>mpeg4</code>, <code>h263</code>, <code>libtheora</code>, <code>prores</code>, <code>dnxhd</code>, <code>libxvid</code>, <code>msmpeg4v2</code>, <code>msmpeg4</code>, <code>wmv1</code>, <code>wmv2</code>, <code>vc1</code>, <code>flv</code>, <code>rawvideo</code>, <code>png</code>, <code>bmp</code>, <code>jpeg2000</code>, <code>mjpeg</code>, <code>huffyuv</code>, <code>liblags</code>, <code>copy</code>.</li> <li><code>stream_loop</code>: Number of times to loop the stream. Corresponds to the <code>-stream_loop</code> parameter in FFmpeg. Any integer greater than or equal to -1.</li> <li><code>shortest</code>: Stop encoding when the shortest input stream ends. Corresponds to the <code>-shortest</code> parameter in FFmpeg. Values are <code>true</code> or <code>false</code>.</li> <li><code>preset</code>: Preset for encoding speed. Corresponds to the <code>-preset</code> parameter in FFmpeg. Available values: <code>veryslow</code>, <code>slower</code>, <code>slow</code>, <code>medium</code>, <code>fast</code>, <code>faster</code>, <code>veryfast</code>, <code>superfast</code>, <code>ultrafast</code>.</li> <li><code>crf</code>: Constant Rate Factor for quality. Corresponds to the <code>-crf</code> parameter in FFmpeg. Any integer between 0 and 51.</li> <li><code>profile</code>: Specifies the profile to use.</li> <li><code>video</code>: Video profile. Corresponds to the <code>-profile:v</code> parameter in FFmpeg. Available values: <code>baseline</code>, <code>main</code>, <code>high</code>, <code>main10</code>, <code>main12</code>, <code>simple</code>, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>.</li> <li><code>audio</code>: Audio profile. Corresponds to the <code>-profile:a</code> parameter in FFmpeg. Available values: <code>aac_low</code>, <code>aac_he</code>, <code>aac_he_v2</code>, <code>aac_ld</code>, <code>aac_eld</code>, <code>ac3</code>.</li> <li><code>level</code>: Level for encoding. Corresponds to the <code>-level</code> parameter in FFmpeg. Available values: <code>1.0</code>, <code>1.1</code>, <code>1.2</code>, <code>1.3</code>, <code>2.0</code>, <code>2.1</code>, <code>2.2</code>, <code>3.0</code>, <code>3.1</code>, <code>3.2</code>, <code>4.0</code>, <code>4.1</code>, <code>4.2</code>, <code>5.0</code>, <code>5.1</code>, <code>5.2</code>.</li> <li><code>pixel_format</code>: Pixel format. Corresponds to the <code>-pix_fmt</code> parameter in FFmpeg. Available values: <code>yuv420p</code>, <code>yuv422p</code>, <code>yuv444p</code>, <code>yuv420p10le</code>, <code>yuv422p10le</code>, <code>yuv444p10le</code>, <code>yuv420p12le</code>, <code>yuv422p12le</code>, <code>yuv444p12le</code>, <code>rgb24</code>, <code>rgba</code>, <code>rgb48le</code>, <code>rgba64le</code>, <code>gray</code>, <code>gray16le</code>, <code>nv12</code>, <code>nv21</code>, <code>yuv420p16le</code>, <code>yuv422p16le</code>, <code>yuv444p16le</code>, <code>bgr24</code>, <code>bgra</code>.</li> <li><code>max_rate</code>: Maximum bitrate. Corresponds to the <code>-maxrate</code> parameter in FFmpeg. Any valid bitrate string.</li> <li><code>buffer_size</code>: Buffer size. Corresponds to the <code>-bufsize</code> parameter in FFmpeg. Any valid buffer size string.</li> <li><code>constant_bitrate</code>: Specifies the constant bitrate.</li> <li><code>video</code>: Constant video bitrate. Corresponds to the <code>-b:v</code> parameter in FFmpeg. Any valid bitrate string.</li> <li><code>audio</code>: Constant audio bitrate. Corresponds to the <code>-b:a</code> parameter in FFmpeg. Any valid bitrate string.</li> <li><code>file_size</code>: Target file size. Corresponds to the <code>-fs</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>audio_quality</code>: Audio quality. Corresponds to the <code>-q:a</code> parameter in FFmpeg. Any integer between 0 and 9.</li> <li><code>pass</code>: Number of encoding passes. Corresponds to the <code>-pass</code> parameter in FFmpeg. Available values: <code>1</code>, <code>2</code>.</li> <li><code>audio_none</code>: No audio encoding. Corresponds to the <code>-an</code> parameter in FFmpeg. Values are <code>true</code> or <code>false</code>.</li> <li><code>video_none</code>: No video encoding. Corresponds to the <code>-vn</code> parameter in FFmpeg. Values are <code>true</code> or <code>false</code>.</li> <li><code>move_flags</code>: Flags for moving the file. Corresponds to the <code>-movflags</code> parameter in FFmpeg. Available values: <code>faststart</code>, <code>frag_keyframe</code>, <code>frag_custom</code>, <code>empty_moov</code>, <code>separate_moof</code>, <code>omit_tfhd_offset</code>, <code>rtphint</code>, <code>frag_discont</code>, <code>default_base_moof</code>, <code>delay_moov</code>, <code>negative_cts_offsets</code>, <code>disable_chpl</code>, <code>write_colr</code>.</li> <li><code>metadata</code>: Metadata attributes.</li> <li><code>key</code>: Metadata key. Corresponds to the <code>-metadata</code> parameter in FFmpeg. Any non-empty string.</li> <li><code>value</code>: Metadata value. Corresponds to the <code>-metadata</code> parameter in FFmpeg. Any non-empty string.</li> <li><code>video_filters</code>: Video filters to apply.</li> <li><code>name</code>: Name of the filter. Corresponds to the <code>-vf</code> parameter in FFmpeg. Any non-empty string.</li> <li><code>value</code>: Value of the filter. Corresponds to the <code>-vf</code> parameter in FFmpeg. Any non-empty string.</li> <li><code>audio_filters</code>: Audio filters to apply.</li> <li><code>name</code>: Name of the filter. Corresponds to the <code>-af</code> parameter in FFmpeg. Any non-empty string.</li> <li><code>value</code>: Value of the filter. Corresponds to the <code>-af</code> parameter in FFmpeg. Any non-empty string.</li> <li><code>time_part</code>: Specifies the time range to trim.</li> <li><code>start_time</code>: Start time for trimming. Corresponds to the <code>-ss</code> parameter in FFmpeg. Any valid time string.</li> <li><code>duration_time</code>: Duration for trimming. Corresponds to the <code>-t</code> parameter in FFmpeg. Any valid time string.</li> <li><code>concat_files</code>: Files to concatenate.</li> <li><code>source</code>: Source file for concatenation. Corresponds to the <code>-i</code> parameter in FFmpeg. Any valid file path.</li> <li><code>duration</code>: Duration of the segment. Corresponds to the <code>-t</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>in_point</code>: In point for the segment. Corresponds to the <code>-ss</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>out_point</code>: Out point for the segment. Corresponds to the <code>-to</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>sync</code>: Sync methods.</li> <li><code>audio</code>: Audio sync method. Corresponds to the <code>-async</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>video</code>: Video sync method. Corresponds to the <code>-vsync</code> parameter in FFmpeg. Available values: <code>passthrough</code>, <code>cfr</code>, <code>vfr</code>, <code>drop</code>, <code>0</code>.</li> <li><code>frame</code>: Frame rates.</li> <li><code>video</code>: Video frame rate. Corresponds to the <code>-r</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>audio</code>: Audio sample rate. Corresponds to the <code>-ar</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>quality</code>: Quality settings.</li> <li><code>video</code>: Video quality. Corresponds to the <code>-q:v</code> parameter in FFmpeg. Any integer between 1 and 31.</li> <li><code>audio</code>: Audio quality. Corresponds to the <code>-q:a</code> parameter in FFmpeg. Any integer between 0 and 9.</li> <li><code>input_framerate</code>: Input frame rate. Corresponds to the <code>-r</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>framerate</code>: Output frame rate. Corresponds to the <code>-r</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>gop_size</code>: Group of pictures size. Corresponds to the <code>-g</code> parameter in FFmpeg. Any integer greater than or equal to -1.</li> <li><code>audio_sampling_rate</code>: Audio sampling rate. Corresponds to the <code>-ar</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>hls</code>: HLS options.</li> <li><code>time</code>: Segment duration for HLS. Corresponds to the <code>-hls_time</code> parameter in FFmpeg. Any non-negative float.</li> <li><code>list_size</code>: Number of segments in the playlist. Corresponds to the <code>-hls_list_size</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>segment_filename</code>: Segment filename pattern. Corresponds to the <code>-hls_segment_filename</code> parameter in FFmpeg. Any valid file name.</li> <li><code>playlist_type</code>: Playlist type. Corresponds to the <code>-hls_playlist_type</code> parameter in FFmpeg. Available values: <code>event</code>, <code>vod</code>.</li> <li><code>segment_type</code>: Segment type. Corresponds to the <code>-hls_segment_type</code> parameter in FFmpeg. Any valid segment type.</li> <li><code>flags</code>: HLS flags. Corresponds to the <code>-hls_flags</code> parameter in FFmpeg. Any valid flag.</li> <li><code>master_playlist_name</code>: Master playlist name. Corresponds to the <code>-master_pl_name</code> parameter in FFmpeg. Any valid file name.</li> <li><code>segment_list</code>: Segment list file. Corresponds to the <code>-hls_segment_list</code> parameter in FFmpeg. Any valid file path.</li> <li><code>segment_list_size</code>: Size of the segment list. Corresponds to the <code>-hls_segment_list_size</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>max_entries</code>: Maximum number of entries. Corresponds to the <code>-hls_segment_list_size</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>allow_cache</code>: Allow caching. Corresponds to the <code>-hls_allow_cache</code> parameter in FFmpeg. Values are <code>true</code> or <code>false</code>.</li> <li><code>key_info_file</code>: Key info file. Corresponds to the <code>-hls_key_info_file</code> parameter in FFmpeg. Any valid file path.</li> <li><code>key_url</code>: Key URL. Corresponds to the <code>-hls_key_url</code> parameter in FFmpeg. Any valid URL.</li> <li><code>channels</code>: Number of audio channels. Corresponds to the <code>-ac</code> parameter in FFmpeg. Any non-negative integer.</li> <li><code>channel_layout</code>: Audio channel layout. Corresponds to the <code>-channel_layout</code> parameter in FFmpeg. Available values: <code>mono</code>, <code>stereo</code>, <code>2.1</code>, <code>3.0</code>, <code>3.1</code>, <code>quad</code>, <code>4.0</code>, <code>4.1</code>, <code>5.0</code>, <code>5.1</code>, <code>6.1</code>, <code>7.0</code>, <code>7.1</code>, <code>hexagonal</code>, <code>octagonal</code>, <code>surround</code>, <code>quadraphonic</code>, <code>5.1(side)</code>, <code>7.1(wide)</code>, <code>ambisonic_first_order</code>, <code>ambisonic_second_order</code>, <code>ambisonic_third_order</code>.</li> <li><code>variant_stream_map</code>: Variant stream map. Corresponds to the <code>-var_stream_map</code> parameter in FFmpeg. Any valid stream map.</li> <li><code>map_input</code>: Map input streams. Corresponds to the <code>-map</code> parameter in FFmpeg. Values are <code>true</code> or <code>false</code>.</li> </ul>"},{"location":"compose-file-references/#run-after","title":"Run After","text":"<p>The <code>run_after</code> attribute specifies a list of tasks to run before this task.</p> <pre><code>run_after:\n  - Basic Video Conversion\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<ol> <li>Basic video conversion</li> <li>Extracting audio from video</li> <li>Converting audio files</li> <li>Resizing videos</li> <li>Cropping videos</li> <li>Trimming videos</li> <li>Combining videos</li> <li>Adding audio to a video</li> <li>Converting a video to GIF</li> <li>Extracting images from video</li> <li>Creating a video from images</li> <li>Adding subtitles to a video</li> <li>Adding a watermark to a video</li> <li>Changing video bit rate</li> <li>Changing audio bit rate</li> <li>Normalizing audio in a video</li> <li>Rotating a video</li> <li>Speeding up a video</li> <li>Slowing down a video</li> <li>Converting video for web</li> <li>Looping a video</li> <li>Capturing webcam to a video file</li> <li>Streaming video to YouTube</li> <li>Convert video to HLS format</li> <li>Convert video for Instagram</li> <li>Batch convert .avi files to .mp4</li> <li>Extract all frames from a video</li> <li>Increase the volume of a video</li> <li>Convert a video to grayscale</li> <li>Creating a thumbnail from a video</li> <li>Stabilize a shaky video</li> <li>Adding a simple text overlay to a video</li> <li>Convert video to 4K</li> <li>Reverse a video</li> <li>Convert a video to vertical</li> <li>Convert a series of images to a timelapse video</li> </ol>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>Welcome to VideoAlchemy! This guide will walk you through the installation process and help you set up your first video processing tasks. Follow these steps to get started quickly.</p>"},{"location":"getting-started/#installation-requirements","title":"Installation Requirements","text":"<p>Before installing VideoAlchemy, ensure your system meets the following requirements:</p> <ol> <li> <p>FFmpeg: VideoAlchemy uses FFmpeg as the core processing engine. You need to have FFmpeg installed on your system.</p> <ul> <li>Visit the FFmpeg download page for installation instructions specific to your operating system.</li> <li>macOS: You can use Homebrew to install FFmpeg:</li> </ul> <pre><code>brew install ffmpeg\n</code></pre> <ul> <li>Linux: For Debian-based distributions, install FFmpeg with:</li> </ul> <pre><code>sudo apt-get install ffmpeg\n</code></pre> </li> </ol>"},{"location":"getting-started/#installing-videoalchemy","title":"Installing VideoAlchemy","text":"<p>To install VideoAlchemy on your system, follow the steps below based on your platform:</p>"},{"location":"getting-started/#macos-and-linux-via-script","title":"macOS and Linux (via script)","text":"<ol> <li>Open your terminal.</li> <li>Run the following command to install VideoAlchemy:</li> </ol> <pre><code>version=$(curl -s https://api.github.com/repos/viddotech/videoalchemy/releases/latest | grep -oP '\"tag_name\": \"\\K(.*)(?=\")') &amp;&amp; curl -o setup.sh \"https://raw.githubusercontent.com/viddotech/videoalchemy/main/scripts/setup.sh\" &amp;&amp; chmod +x setup.sh &amp;&amp; sudo ./setup.sh \"$version\" &amp;&amp; rm -rf setup.sh\n</code></pre> <p>This script will download and install the latest version of VideoAlchemy.</p>"},{"location":"getting-started/#alpine-linux","title":"Alpine Linux","text":"<p>If you\u2019re using Alpine Linux, you can follow the same steps as above. The installation script is compatible with Alpine without the need for <code>zsh</code> or <code>fish</code> shells.</p>"},{"location":"getting-started/#from-source","title":"From Source","text":"<p>Alternatively, you can clone the VideoAlchemy repository and build the tool from the source:</p> <ol> <li>Clone the repository:    <pre><code>git clone https://github.com/viddotech/videoalchemy.git\n</code></pre></li> <li>Navigate to the project directory:    <pre><code>cd videoalchemy\n</code></pre></li> <li>Build the tool:    <pre><code>make build\n</code></pre></li> <li>After building, you can move the binary to your system\u2019s <code>$PATH</code> to use it globally.</li> </ol>"},{"location":"getting-started/#verifying-the-installation","title":"Verifying the Installation","text":"<p>Once VideoAlchemy is installed, you can verify the installation by running: <pre><code>videoalchemy --version\n</code></pre></p> <p>This command will display the installed version of VideoAlchemy.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>After installation, you're ready to start processing videos with VideoAlchemy! To begin:</p> <ol> <li>Create a YAML file with your video tasks.</li> <li>Run the following command to execute your tasks:    <pre><code>videoalchemy compose -f viddo-compose.yaml\n</code></pre> Check out the Guides section for detailed examples and use cases.</li> </ol>"},{"location":"guides/","title":"Guides","text":""},{"location":"guides/#introduction","title":"Introduction","text":"<p>This guide will help you understand how to use the <code>viddo-compose.yaml</code> file to define and execute video processing tasks using FFmpeg. The <code>viddo-compose.yaml</code> file is a configuration file that specifies the commands, inputs, outputs, and codecs/filters to apply for each task.</p>"},{"location":"guides/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Version</li> <li>Generate Path</li> <li>Tasks<ul> <li>Basic Video Conversion</li> <li>Extracting Audio from Video</li> <li>Resizing Video</li> <li>Trimming Videos</li> <li>Combining Videos</li> <li>Extract Images from Video</li> <li>Creating a Video from Images</li> <li>Convert Video to Multi-Bitrate HLS Format</li> </ul> </li> </ol>"},{"location":"guides/#version","title":"Version","text":"<p>Compose file version is different from the VideoAlchemy version. it's used to define the schema version of the <code>viddo-compose.yaml</code> file.</p> <pre><code>version: 1\n</code></pre>"},{"location":"guides/#generate-path","title":"Generate Path","text":"<p>The path where containing the generated ffmpeg script, ffmpeg logs, etc.</p> <pre><code>generate_path: \"./sample/generated\"\n</code></pre>"},{"location":"guides/#tasks","title":"Tasks","text":"<p>The <code>tasks</code> attribute is a list of tasks to be executed. Each task specifies the command to run, the inputs, outputs, and any codecs or filters to apply.</p>"},{"location":"guides/#basic-video-conversion","title":"Basic Video Conversion","text":"<pre><code>- name: Basic Video Conversion  # Name of the task\n  command: ffmpeg  # Command to be executed\n  inputs:  # List of input files\n    - id: input_1  # Identifier for the input\n      source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'  # Path to the input file\n  outputs:  # List of output files\n    - id: output_avi  # Identifier for the output\n      overwrite: true  # Whether to overwrite the output file if it exists\n      source: 'sample/outputs/1280x720_30mb_output.avi'  # Path to the output file\n</code></pre>"},{"location":"guides/#extracting-audio-from-video","title":"Extracting Audio from Video","text":"<pre><code>- name: Extracting Audio from Video\n  command: ffmpeg\n  inputs:\n    - id: input_2\n      output_id: output_avi  # Reference to the output of a previous task\n  codecs:  # List of codecs to apply\n    - codec_name:\n        audio: copy  # Copy the audio codec\n      video_none: true  # No video codec\n  run_after:  # List of tasks to run before this task\n    - Basic Video Conversion\n  outputs:\n    - id: output_only_audio\n      overwrite: true\n      source: \"sample/outputs/1280x720_30mb_output_only_audio.mp3\"\n</code></pre>"},{"location":"guides/#resizing-video","title":"Resizing Video","text":"<pre><code>- name: Resizing Video\n  command: ffmpeg\n  inputs:\n    - id: input_3\n      source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'\n  codecs:\n    - video_filters:  # List of video filters to apply\n        - name: scale\n          value: \"720:480:flags=lanczos\"\n  outputs:\n    - id: resized_output.mp4\n      overwrite: true\n      source: 'sample/outputs/resized.mp4'\n</code></pre>"},{"location":"guides/#trimming-videos","title":"Trimming Videos","text":"<pre><code>- name: Trimming Videos\n  command: ffmpeg\n  inputs:\n    - id: input_4\n      source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'\n  codecs:\n    - time_part:  # Time range to trim\n        start_time: \"00:00:10.000\"\n        end_time: \"00:00:20.000\"\n  outputs:\n    - id: trim_video\n      overwrite: true\n      source: 'sample/outputs/trim.mp4'\n</code></pre>"},{"location":"guides/#combining-videos","title":"Combining Videos","text":"<pre><code>- name: Combining Videos\n  command: ffmpeg\n  codecs:\n    - concat_files:  # List of files to concatenate\n        - source: \"./sample/inputs/sample-10s.mp4\"\n        - source: \"./sample/inputs/sample-20s.mp4\"\n  outputs:\n    - id: concat_video\n      overwrite: true\n      source: 'sample/outputs/concat.mp4'\n</code></pre>"},{"location":"guides/#extract-images-from-video","title":"Extract Images from Video","text":"<pre><code>- name: Extract images from video\n  command: ffmpeg\n  inputs:\n    - id: input_5\n      source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'\n  codecs:\n    - video_filters:\n      - name: fps\n        value: 1\n  outputs:\n    - id: extract_image_%04d\n      start_number: 0\n      length: 10\n      overwrite: true\n      source: 'sample/outputs/extracted/%04d.png'\n</code></pre>"},{"location":"guides/#creating-a-video-from-images","title":"Creating a Video from Images","text":"<pre><code>- name: Creating a video from images\n  command: ffmpeg\n  inputs:\n    - id: input_6\n      output_id: extract_image_%04d\n  codecs:\n    - input_framerate: 24\n      codec_name:\n        video: libx264\n      pixel_format: yuv420p\n  run_after:\n    - Extract images from video\n  outputs:\n    - id: video_from_images\n      overwrite: true\n      source: 'sample/outputs/video_from_images.mp4'\n</code></pre>"},{"location":"guides/#convert-video-to-multi-bitrate-hls-format","title":"Convert Video to Multi-Bitrate HLS Format","text":"<pre><code>- name: Convert video to multi-bitrate HLS format\n  command: ffmpeg\n  inputs:\n    - id: input_7\n      source: 'sample/inputs/sample-10s.mp4'\n  codecs:\n    - codec_name:\n        audio: aac\n      constant_bitrate:\n        audio: 128k\n      audio_sampling_rate: 48000\n    - video_filters:\n        - name: scale\n          value: \"-2:720\"\n      constant_bitrate:\n        video: 3000k\n      max_rate: 3200k\n      buffer_size: 6000k\n      map_input: true\n    - video_filters:\n        - name: scale\n          value: \"-2:480\"\n      constant_bitrate:\n        video: 1500k\n      max_rate: 1600k\n      buffer_size: 3000k\n      output_id: hls_video_480p\n      map_input: true\n    - video_filters:\n        - name: scale\n          value: \"-2:360\"\n      constant_bitrate:\n        video: 800k\n      max_rate: 900k\n      buffer_size: 1800k\n      output_id: hls_video_360p\n      map_input: true\n    - hls:\n        time: 10\n        segment_filename: \"sample/outputs/hls/%v/segment_%03d.ts\"\n        master_playlist_name: \"master.m3u8\"\n        playlist_type: \"vod\"\n      variant_stream_map: \"v:0,a:0 v:1,a:1 v:2,a:2\"\n  outputs:\n    - id: playlist\n      overwrite: true\n      format: hls\n      source: 'sample/outputs/hls/%v/playlist.m3u8'\n</code></pre>"},{"location":"sponsor/","title":"Support Us with Cryptocurrency","text":"<p>Support us by sponsoring through your preferred cryptocurrency. Your contributions help keep the project going!</p>"},{"location":"sponsor/#bitcoin-btc","title":"\ud83d\ude80 Bitcoin (BTC)","text":"<p>Address: <code>bc1qdzpxjdvr3dgk25qv7ccps8ankxrrxtgw2s83pc</code></p> <p>Scan the QR code with your crypto wallet:</p> <p></p>"},{"location":"sponsor/#ethereum-eth","title":"\ud83c\udf0d Ethereum (ETH)","text":"<p>Address: <code>0x1b41506fD9FF116b1075a43492508e51CAd702BF</code></p> <p>Scan the QR code with your crypto wallet:</p> <p></p> <p>Thank you for your generosity! \ud83d\udc99</p>"},{"location":"videoalchemy-tutorial/","title":"Videoalchemy tutorial","text":""},{"location":"videoalchemy-tutorial/#videoalchemy-tutorial","title":"VideoAlchemy Tutorial","text":""},{"location":"videoalchemy-tutorial/#run-videoalchemy","title":"Run VideoAlchemy","text":"<pre><code>videoalchemy compose -f viddo-compose.yaml\n</code></pre> <p>The <code>viddo-compose.yaml</code> file is a configuration file used to define a series of video processing tasks using FFmpeg. Each task specifies the command to run, the inputs, outputs, and any codecs or filters to apply. Below is a detailed explanation of the attributes used in the <code>viddo-compose.yaml</code> file:</p>"},{"location":"videoalchemy-tutorial/#example-viddo-composeyaml-file","title":"Example <code>viddo-compose.yaml</code> File","text":"<pre><code>version: 0.1  # The version of the viddo-compose schema\n\ngenerate_path: \"./sample/generated\"  # The path where generated files will be stored\n\ntasks:  # List of tasks to be executed\n  - name: Basic Video Conversion  # Name of the task\n    command: ffmpeg  # Command to be executed\n    inputs:  # List of input files\n      - id: input_1  # Identifier for the input\n        source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'  # Path to the input file\n    outputs:  # List of output files\n      - id: output_avi  # Identifier for the output\n        overwrite: true  # Whether to overwrite the output file if it exists\n        source: 'sample/outputs/1280x720_30mb_output.avi'  # Path to the output file\n\n  - name: Extracting Audio from Video\n    command: ffmpeg\n    inputs:\n      - id: input_2\n        output_id: output_avi  # Reference to the output of a previous task\n    codecs:  # List of codecs to apply\n      - codec_name:\n          audio: copy  # Copy the audio codec\n        video_none: true  # No video codec\n    run_after:  # List of tasks to run before this task\n      - Basic Video Conversion\n    outputs:\n      - id: output_only_audio\n        overwrite: true\n        source: \"sample/outputs/1280x720_30mb_output_only_audio.mp3\"\n\n  - name: Resizing Video\n    command: ffmpeg\n    inputs:\n      - id: input_3\n        source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'\n    codecs:\n      - video_filters:  # List of video filters to apply\n          - name: scale\n            value: \"720:480:flags=lanczos\"\n    outputs:\n      - id: resized_output.mp4\n        overwrite: true\n        source: 'sample/outputs/resized.mp4'\n\n  - name: Trimming Videos\n    command: ffmpeg\n    inputs:\n      - id: input_4\n        source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'\n    codecs:\n      - time_part:  # Time range to trim\n          start_time: \"00:00:10.000\"\n          end_time: \"00:00:20.000\"\n    outputs:\n      - id: trim_video\n        overwrite: true\n        source: 'sample/outputs/trim.mp4'\n\n  - name: Combining Videos\n    command: ffmpeg\n    codecs:\n      - concat_files:  # List of files to concatenate\n          - source: \"./sample/inputs/sample-10s.mp4\"\n          - source: \"./sample/inputs/sample-20s.mp4\"\n    outputs:\n      - id: concat_video\n        overwrite: true\n        source: 'sample/outputs/concat.mp4'\n\n  - name: Extract images from video\n    command: ffmpeg\n    inputs:\n      - id: input_5\n        source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'\n    codecs:\n      - video_filters:\n        - name: fps\n          value: 1\n    outputs:\n      - id: extract_image_%04d\n        start_number: 0\n        length: 10\n        overwrite: true\n        source: 'sample/outputs/extracted/%04d.png'\n\n  - name: Creating a video from images\n    command: ffmpeg\n    inputs:\n      - id: input_6\n        output_id: extract_image_%04d\n    codecs:\n      - input_framerate: 24\n        codec_name:\n          video: libx264\n        pixel_format: yuv420p\n    run_after:\n      - Extract images from video\n    outputs:\n      - id: video_from_images\n        overwrite: true\n        source: 'sample/outputs/video_from_images.mp4'\n\n  - name: Convert video to multi-bitrate HLS format\n    command: ffmpeg\n    inputs:\n      - id: input_7\n        source: 'sample/inputs/sample-10s.mp4'\n    codecs:\n      - codec_name:\n          audio: aac\n        constant_bitrate:\n          audio: 128k\n        audio_sampling_rate: 48000\n      - video_filters:\n          - name: scale\n            value: \"-2:720\"\n        constant_bitrate:\n          video: 3000k\n        max_rate: 3200k\n        buffer_size: 6000k\n        map_input: true\n      - video_filters:\n          - name: scale\n            value: \"-2:480\"\n        constant_bitrate:\n          video: 1500k\n        max_rate: 1600k\n        buffer_size: 3000k\n        output_id: hls_video_480p\n        map_input: true\n      - video_filters:\n          - name: scale\n            value: \"-2:360\"\n        constant_bitrate:\n          video: 800k\n        max_rate: 900k\n        buffer_size: 1800k\n        output_id: hls_video_360p\n        map_input: true\n      - hls:\n          time: 10\n          segment_filename: \"sample/outputs/hls/%v/segment_%03d.ts\"\n          master_playlist_name: \"master.m3u8\"\n          playlist_type: \"vod\"\n        variant_stream_map: \"v:0,a:0 v:1,a:1 v:2,a:2\"\n    outputs:\n      - id: playlist\n        overwrite: true\n        format: hls\n        source: 'sample/outputs/hls/%v/playlist.m3u8'\n</code></pre>"},{"location":"videoalchemy-tutorial/#full-viddo-composeyaml-file-with-comments","title":"Full <code>viddo-compose.yaml</code> File with Comments","text":"<pre><code>version: 0.1  # The version of the viddo-compose schema\n\ngenerate_path: \"./sample/generated\"  # The path where generated files will be stored\n\ntasks:  # List of tasks to be executed\n  - name: Task Name  # Name of the task\n    command: ffmpeg  # Command to be executed\n    inputs:  # List of input files\n      - id: input_id  # Identifier for the input\n        source: 'path/to/input/file'  # Path to the input file\n        output_id: previous_task_output_id  # Reference to the output of a previous task (optional)\n    codecs:  # List of codecs to apply (optional)\n      - codec_name:\n          video: libx264  # Video codec\n          audio: aac  # Audio codec\n        video_filters:  # List of video filters to apply (optional)\n          - name: scale\n            value: \"1280:720\"\n        audio_filters:  # List of audio filters to apply (optional)\n          - name: volume\n            value: \"2.0\"\n        constant_bitrate:  # Constant bitrate settings (optional)\n          video: 3000k\n          audio: 128k\n        max_rate: 3200k  # Maximum bitrate (optional)\n        buffer_size: 6000k  # Buffer size (optional)\n        pixel_format: yuv420p  # Pixel format (optional)\n        time_part:  # Time range to trim (optional)\n          start_time: \"00:00:10.000\"\n          end_time: \"00:00:20.000\"\n        concat_files:  # List of files to concatenate (optional)\n          - source: 'path/to/file1'\n          - source: 'path/to/file2'\n        hls:  # HLS settings (optional)\n          time: 10\n          segment_filename: \"path/to/segment_%03d.ts\"\n          master_playlist_name: \"master.m3u8\"\n          playlist_type: \"vod\"\n        variant_stream_map: \"v:0,a:0 v:1,a:1 v:2,a:2\"\n    run_after:  # List of tasks to run before this task (optional)\n      - Previous Task Name\n    outputs:  # List of output files\n      - id: output_id  # Identifier for the output\n        overwrite: true  # Whether to overwrite the output file if it exists\n        source: 'path/to/output/file'  # Path to the output file\n        format: hls  # Output format (optional)\n        start_number: 0  # Start number for output files (optional)\n        length: 10  # Number of output files (optional)\n</code></pre>"},{"location":"ffmpeg-commands/adding-a-simple-text-overlay-to-a-video/","title":"Adding a Simple Text Overlay to a Video","text":"<p>Embed a text overlay onto a video file using FFmpeg's <code>drawtext</code> filter, ideal for watermarking, titles, or annotations.</p>"},{"location":"ffmpeg-commands/adding-a-simple-text-overlay-to-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Adding a Simple Text Overlay to a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: drawtext\n            value: \"text='Your Text Here':fontcolor=white:fontsize=24:x=10:y=10\"\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/adding-a-simple-text-overlay-to-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"drawtext=text='Your Text Here':fontcolor=white:fontsize=24:x=10:y=10\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/adding-a-simple-text-overlay-to-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"drawtext=text='Your Text Here':fontcolor=white:fontsize=24:x=10:y=10\"</code>: Applies the drawtext video filter with options to overlay text on the video:</li> <li><code>text='Your Text Here'</code>: The text to overlay on the video. Replace 'Your Text Here' with your desired text.</li> <li><code>fontcolor=white</code>: Sets the color of the text. Replace <code>white</code> with any valid color name or hex code.</li> <li><code>fontsize=24</code>: Sets the size of the text. Adjust <code>24</code> to your desired font size.</li> <li><code>x=10:y=10</code>: Positions the text 10 pixels from the left (<code>x</code>) and 10 pixels from the top (<code>y</code>) of the video frame. Adjust these values to change the text position.</li> </ul>"},{"location":"ffmpeg-commands/adding-a-simple-text-overlay-to-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid filter options: Happens if options passed to the drawtext filter are incorrect or unsupported. Verify the syntax and values for all filter options.</li> <li>Font not found: Arises if the specified font is not available on your system. Specify a font file directly with the <code>fontfile</code> option or ensure the font name is correct.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/adding-a-simple-text-overlay-to-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Customizing Text Appearance: Beyond font size and color, the drawtext filter supports various options for customizing text appearance, including <code>fontfile</code> (to specify a custom font), <code>shadowcolor</code>, <code>shadowx</code>, <code>shadowy</code> (for text shadows), and <code>box</code> (to add a background box behind the text).</li> <li>Dynamic Text Placement: For more dynamic text placement, FFmpeg supports expressions for the <code>x</code> and <code>y</code> parameters, such as <code>x=(w-text_w)/2</code> to center the text horizontally.</li> <li>Timecode Overlay: The drawtext filter can display dynamic content like the current timecode using special variables and expressions, e.g., <code>text='%{pts\\:hms}'</code> for a running timestamp.</li> <li>Performance: Adding a text overlay is relatively lightweight, but re-encoding the video can affect processing time, especially for videos that are high-resolution or long.</li> </ul>"},{"location":"ffmpeg-commands/adding-a-watermark-to-a-video/","title":"Adding a Watermark to a Video","text":"<p>Embed a watermark image onto a video file using FFmpeg to brand or copyright protect your video content.</p>"},{"location":"ffmpeg-commands/adding-a-watermark-to-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Adding a Watermark to a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n      - id: watermark\n        source: 'watermark.png'\n    codecs:\n      - video_filters:\n          - name: overlay\n            value: \"10:10\"\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/adding-a-watermark-to-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -i watermark.png -filter_complex \"overlay=10:10\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/adding-a-watermark-to-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-i watermark.png</code>: Specifies the watermark image file. Replace <code>watermark.png</code> with the path to your watermark image. The image format can be PNG, JPG, or any other image format supported by FFmpeg.</li> <li><code>-filter_complex \"overlay=10:10\"</code>: Applies a complex filter to overlay the watermark image onto the video. <code>10:10</code> positions the top-left corner of the watermark image 10 pixels from the top and 10 pixels from the left of the video frame. Adjust these values to change the watermark position.</li> </ul>"},{"location":"ffmpeg-commands/adding-a-watermark-to-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input video file or the watermark image file. Ensure all file paths are correct.</li> <li>Invalid overlay position: Occurs if the specified position values for the overlay filter are outside the bounds of the video frame. Ensure the position values are within the video dimensions.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input files or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/adding-a-watermark-to-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>While adding a watermark is primarily a CPU-bound process, you can utilize GPU acceleration for the video encoding part of the process. For Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -i watermark.png -filter_complex \"overlay=10:10\" -c:v h264_nvenc output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/adding-a-watermark-to-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Transparency Support: If your watermark is a PNG with transparency, FFmpeg will respect this transparency in the output video.</li> <li>Watermark Size: If necessary, you can resize the watermark image before overlaying it onto the video using the <code>scale</code> filter within the <code>-filter_complex</code> option (e.g., <code>overlay=10:10,scale=100:50</code> to resize the watermark to 100x50 pixels).</li> <li>Positioning the Watermark: The <code>overlay</code> filter allows for dynamic positioning using variables such as <code>main_w</code>, <code>main_h</code> (video width and height), and <code>overlay_w</code>, <code>overlay_h</code> (watermark width and height). For example, <code>overlay=(main_w-overlay_w-10):(main_h-overlay_h-10)</code> positions the watermark 10 pixels from the bottom right corner.</li> <li>Fade In/Out Effects: To add fade-in and fade-out effects to your watermark, you can use the <code>fade</code> filter in combination with the <code>overlay</code> filter within the <code>-filter_complex</code> option.</li> </ul>"},{"location":"ffmpeg-commands/adding-audio-to-a-video/","title":"Adding Audio to a Video","text":"<p>Combine an audio track with a video file, replacing the original audio of the video using FFmpeg.</p>"},{"location":"ffmpeg-commands/adding-audio-to-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Adding Audio to a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'video.mp4'\n      - id: input_2\n        source: 'audio.mp3'\n    codecs:\n      - codec_name:\n          video: copy\n          audio: aac\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/adding-audio-to-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i video.mp4 -i audio.mp3 -c:v copy -c:a aac -strict experimental output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/adding-audio-to-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i video.mp4</code>: Specifies the input video file. Replace <code>video.mp4</code> with the path to your source video file.</li> <li><code>-i audio.mp3</code>: Specifies the input audio file. Replace <code>audio.mp3</code> with the path to your source audio file.</li> <li><code>-c:v copy</code>: Copies the video codec from the input video file without re-encoding.</li> <li><code>-c:a aac</code>: Specifies the audio codec for the output file. This example uses AAC, but you can replace it with your desired audio codec.</li> <li><code>-strict experimental</code>: Allows the use of experimental codecs. This flag is sometimes required when using certain audio codecs like AAC.</li> </ul>"},{"location":"ffmpeg-commands/adding-audio-to-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate one of the input files. Ensure all paths to the video and audio files are correct.</li> <li>Incompatible formats: Occurs if the video and audio formats are not compatible with the output container. Ensure that the chosen formats are supported by the output file's container format.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input files or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/adding-audio-to-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Adding audio to a video primarily involves audio processing and does not significantly benefit from GPU acceleration. However, if you need to re-encode the video for any reason, you can utilize GPU acceleration for the video encoding part:</p> <p>For Nvidia GPUs:</p> <pre><code>ffmpeg -i video.mp4 -i audio.mp3 -c:v h264_nvenc -c:a aac output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/adding-audio-to-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Sync Issues: Ensure the audio and video durations match to prevent sync issues. Use additional FFmpeg options like <code>-shortest</code> or <code>-t</code> to control the output duration if necessary.</li> <li>Audio Quality: When encoding audio, consider the bitrate for quality and file size. Use the <code>-b:a</code> option to specify the audio bitrate (e.g., <code>-b:a 192k</code> for 192 kbps).</li> <li>Multiple Audio Tracks: If the video file already contains an audio track and you want to add another one without removing the original, use the <code>-map</code> option to select multiple streams for the output file.</li> <li>Volume Adjustment: To adjust the volume of the added audio, use the <code>volume</code> audio filter (e.g., <code>-af \"volume=1.5\"</code> to increase the volume by 50%). or adding audio to a video in FFmpeg, covering the syntax, parameters, possible errors, considerations for GPU acceleration, and additional information, all formatted in markdown.</li> </ul>"},{"location":"ffmpeg-commands/adding-subtitles-to-a-video/","title":"Adding Subtitles to a Video","text":"<p>Embed subtitles into a video file using FFmpeg, enhancing accessibility and viewer experience.</p>"},{"location":"ffmpeg-commands/adding-subtitles-to-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Adding Subtitles to a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - video_filters:\n          - name: subtitles\n            value: 'subtitles.srt'\n</code></pre>"},{"location":"ffmpeg-commands/adding-subtitles-to-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf subtitles=subtitles.srt output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/adding-subtitles-to-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf subtitles=subtitles.srt</code>: Applies the subtitles video filter. Replace <code>subtitles.srt</code> with the path to your subtitle file.</li> <li><code>output.mp4</code>: Specifies the name of the output video file. Replace <code>output.mp4</code> with your desired output file name.</li> </ul>"},{"location":"ffmpeg-commands/adding-subtitles-to-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input video file or subtitle file. Ensure all file paths are correct.</li> <li>Unsupported subtitle format: Occurs if the subtitle format is not supported by FFmpeg. Ensure the subtitle file is in a format FFmpeg can process, such as SRT or ASS.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input files or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/adding-subtitles-to-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Adding subtitles is a CPU-bound process, as it involves rendering text onto the video frames. Therefore, there is no direct GPU acceleration command for adding subtitles. However, if you're performing other video processing tasks alongside subtitle addition, you can utilize GPU acceleration for those tasks. For example, for video encoding with Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -vf subtitles=subtitles.srt -c:v h264_nvenc output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/adding-subtitles-to-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Subtitle Encoding: Ensure your subtitle file's encoding matches the expected encoding (e.g., UTF-8). Use the <code>sub_charenc</code> option if you need to specify a character encoding for the subtitles (e.g., <code>-sub_charenc ISO-8859-1</code>).</li> <li>Styling Subtitles: For more control over subtitle appearance, consider using the ASS (Advanced SubStation Alpha) format, which supports advanced styling options. You can convert SRT to ASS using tools like <code>ffmpeg</code> or dedicated subtitle editors.</li> <li>Hard Subs vs. Soft Subs: The command provided burns the subtitles into the video (hard subs), making them always visible. If you prefer to keep subtitles as a separate selectable track (soft subs), use the <code>-c:s copy</code> parameter instead of <code>-vf subtitles=subtitles.srt</code>.</li> <li>Font Configuration: When burning subtitles, FFmpeg uses default fonts. You can specify fonts with the <code>fontsdir</code> option if your subtitles require a specific font style or family not available by default on your system.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/","title":"Basic Video Conversion","text":"<p>Convert video files from one format to another using various tools.</p>"},{"location":"ffmpeg-commands/basic-video-conversion/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Basic Video Conversion\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    outputs:\n      - id: output_avi\n        overwrite: true\n        source: 'output.avi'\n</code></pre>"},{"location":"ffmpeg-commands/basic-video-conversion/#ffmpeg-command","title":"FFmpeg Command","text":"<pre><code>ffmpeg -i input.mp4 output.avi\n</code></pre>"},{"location":"ffmpeg-commands/basic-video-conversion/#parameters-for-ffmpeg","title":"Parameters for FFmpeg","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>output.avi</code>: Specifies the output file. The extension of the output file determines the output format. Replace <code>output.avi</code> with your desired output file name and format.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#possible-errors-for-ffmpeg","title":"Possible Errors for FFmpeg","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Unsupported codec: Occurs if the output format requires a codec not supported or not installed. Ensure that the desired output format is supported.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#gpu-acceleration-command-for-ffmpeg","title":"GPU Acceleration Command for FFmpeg","text":"<p>For Nvidia GPUs, use:</p> <pre><code>ffmpeg -hwaccel cuda -i input.mp4 -c:v h264_nvenc output.avi\n</code></pre>"},{"location":"ffmpeg-commands/basic-video-conversion/#gstreamer-command","title":"GStreamer Command","text":"<pre><code>gst-launch-1.0 filesrc location=input.mp4 ! decodebin ! videoconvert ! x264enc ! avimux ! filesink location=output.avi\n</code></pre>"},{"location":"ffmpeg-commands/basic-video-conversion/#parameters-for-gstreamer","title":"Parameters for GStreamer","text":"<ul> <li><code>filesrc location=input.mp4</code>: Specifies the source file.</li> <li><code>videoconvert</code>: Converts video formats for compatibility.</li> <li><code>x264enc</code>: Uses the x264 encoder for H.264 video encoding.</li> <li><code>avimux</code>: Muxes streams into an AVI container.</li> <li><code>filesink location=output.avi</code>: Specifies the destination file.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#possible-errors-for-gstreamer","title":"Possible Errors for GStreamer","text":"<ul> <li>Pipeline configuration error: Occurs if there's an issue with how the pipeline is set up or if a necessary plugin is missing.</li> <li>Unsupported codec or format: Similar to FFmpeg, if the pipeline uses codecs or formats not supported by GStreamer or not installed on the system.</li> <li>File read/write error: If GStreamer cannot access the source or destination files due to permissions or if the destination path is incorrect.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#opencv-command","title":"OpenCV Command","text":"<p>Using OpenCV for video conversion requires writing a small script. Here's an example in Python:</p> <pre><code>import cv2\n\n# Load the input video\ncap = cv2.VideoCapture('input.mp4')\n\n# Define the codec and create VideoWriter object\nfourcc = cv2.VideoWriter_fourcc(*'DIVX')\nout = cv2.VideoWriter('output.avi', fourcc, 20.0, (640, 480))\n\nwhile(cap.isOpened()):\n    ret, frame = cap.read()\n    if not ret:\n        break\n\n    # Write the frame into the file 'output.avi'\n    out.write(frame)\n\n# Release everything if job is finished\ncap.release()\nout.release()\n</code></pre>"},{"location":"ffmpeg-commands/basic-video-conversion/#possible-errors-for-opencv","title":"Possible Errors for OpenCV","text":"<ul> <li>Codec not supported: If the specified codec is not available on the system, OpenCV will fail to write the video file.</li> <li>Incorrect file path: If the path to the input file or the destination for the output file is incorrect, OpenCV will not be able to open or save the file.</li> <li>Frame capture error: During video processing, if OpenCV cannot read frames from the video, it might stop the conversion process prematurely.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#libvlc-command","title":"libVLC Command","text":"<p>Converting video files with libVLC also typically involves scripting. Below is an example command using the VLC command line:</p> <pre><code>vlc -I dummy input.mp4 vlc://quit --sout \"#transcode{vcodec=h264,vb=800,acodec=mp3,ab=128}:standard{access=file,mux=avi,dst='output.avi'}\"\n</code></pre>"},{"location":"ffmpeg-commands/basic-video-conversion/#parameters-for-libvlc","title":"Parameters for libVLC","text":"<ul> <li><code>-I dummy</code>: Runs VLC without an interface.</li> <li><code>input.mp4</code>: Specifies the input file.</li> <li><code>--sout</code>: Defines the stream output chain.</li> <li><code>vcodec=h264,vb=800</code>: Sets the video codec to H.264 with a bitrate of 800 kb/s.</li> <li><code>acodec=mp3,ab=128</code>: Sets the audio codec to MP3 with a bitrate of 128 kb/s.</li> <li><code>mux=avi</code>: Uses AVI as the muxing format.</li> <li><code>dst='output.avi'</code>: Specifies the destination file.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#possible-errors-for-libvlc","title":"Possible Errors for libVLC","text":"<ul> <li>Unsupported codec or format: If VLC does not support the specified codec or format for the input or output files.</li> <li>Streaming error: When using VLC for streaming or converting streaming media, network issues or incorrect stream URLs can cause errors.</li> <li>Permission issues: Similar to other tools, if VLC lacks permissions to access the input file or write to the output location, it can result in errors.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#additional-information","title":"Additional Information","text":""},{"location":"ffmpeg-commands/basic-video-conversion/#ffmpeg","title":"FFmpeg","text":"<ul> <li>Codecs and Formats: The output format is determined by the file extension of the output file (e.g., <code>.mp4</code>, <code>.avi</code>, <code>.mkv</code>). The codec used for encoding can be specified with the <code>-c:v</code> parameter (e.g., <code>-c:v libx264</code> for H.264).</li> <li>Quality and Compression: You can control the quality and compression of the output video by adjusting the bitrate (using <code>-b:v</code>) or the constant rate factor (using <code>-crf</code> for codecs like H.264).</li> <li>Audio: By default, FFmpeg will also transcode the audio stream. You can specify the audio codec with <code>-c:a</code> (e.g., <code>-c:a aac</code> for AAC audio) and adjust the audio bitrate with <code>-b:a</code>.</li> <li>Compatibility: Ensure that the chosen codecs and formats are compatible with your intended playback devices or platforms.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#gstreamer","title":"GStreamer","text":"<ul> <li>Codecs and Formats: Uses a pipeline-based approach for handling various codecs and formats. The encoding process is determined by the elements in the pipeline (e.g., x264enc for H.264 encoding).</li> <li>Quality and Compression: Allows for dynamic adjustment of quality and compression settings within the pipeline. Parameters like bitrate can be specified for certain encoders.</li> <li>Audio: Supports audio processing and encoding through its pipeline. Audio codecs and parameters can be specified similar to video settings.</li> <li>Compatibility: Modular architecture enables support for a wide range of codecs and formats, ensuring compatibility across different platforms and devices.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#opencv","title":"OpenCV","text":"<ul> <li>Codecs and Formats: Limited by system codecs but supports common formats for reading and writing videos. The codec is specified in the VideoWriter constructor (e.g., <code>cv2.VideoWriter_fourcc(*'DIVX')</code> for AVI).</li> <li>Quality and Compression: Offers control over the video's resolution and frame rate, which can indirectly affect quality and size.</li> <li>Audio: Does not natively support audio processing; OpenCV focuses primarily on video and image processing.</li> <li>Compatibility: Works well for a wide range of video processing tasks, but compatibility with codecs and formats is dependent on the underlying system.</li> </ul>"},{"location":"ffmpeg-commands/basic-video-conversion/#libvlc","title":"libVLC","text":"<ul> <li>Codecs and Formats: Supports a broad range of codecs and formats for both input and output, leveraging VLC's extensive format support.</li> <li>Quality and Compression: Quality and compression settings can be adjusted through transcode module options, like specifying video bitrate and scale.</li> <li>Audio: Offers comprehensive audio processing capabilities, including codec selection and bitrate adjustments, similar to its video processing features.</li> <li>Compatibility: Highly compatible with numerous devices and platforms, benefiting from VLC's universal media playback capabilities.</li> </ul>"},{"location":"ffmpeg-commands/batch-convert-avi-files-to-mp4/","title":"Batch Convert .AVI Files to .MP4","text":"<p>Automate the conversion of multiple .AVI video files to the .MP4 format using FFmpeg, streamlining the process for efficiency and consistency.</p>"},{"location":"ffmpeg-commands/batch-convert-avi-files-to-mp4/#command-linux-and-macos","title":"Command (Linux and macOS)","text":"<pre><code>for i in *.avi; do ffmpeg -i \"$i\" -c:v libx264 -preset fast -c:a aac \"${i%.avi}.mp4\"; done\n</code></pre>"},{"location":"ffmpeg-commands/batch-convert-avi-files-to-mp4/#command-windows-command-prompt","title":"Command (Windows Command Prompt)","text":"<pre><code>FOR %G IN (*.avi) DO ffmpeg -i \"%G\" -c:v libx264 -preset fast -c:a aac \"%~nG.mp4\"\n</code></pre>"},{"location":"ffmpeg-commands/batch-convert-avi-files-to-mp4/#parameters","title":"Parameters","text":"<ul> <li><code>-i \"$i\" / \"%G\"</code>: Specifies the input .AVI file. The variables <code>$i</code> (for bash) and <code>%G</code> (for CMD) represent each .AVI file found by the loop.</li> <li><code>-c:v libx264</code>: Utilizes the H.264 codec for video encoding to ensure good compatibility and a balance between quality and file size.</li> <li><code>-preset fast</code>: Selects a preset for the libx264 encoder that optimizes the balance between encoding speed and output quality. Alternatives include <code>veryfast</code>, <code>faster</code>, <code>medium</code>, <code>slow</code>, and <code>veryslow</code>.</li> <li><code>-c:a aac</code>: Sets the audio codec to AAC for broad compatibility.</li> <li><code>${i%.avi}.mp4\" / \"%~nG.mp4</code>: Defines the name of the output .MP4 file. The expressions <code>${i%.avi}.mp4</code> and <code>%~nG.mp4</code> remove the <code>.avi</code> extension from the input file name and append <code>.mp4</code>.</li> </ul>"},{"location":"ffmpeg-commands/batch-convert-avi-files-to-mp4/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: This error may occur if no .AVI files are present in the directory. Ensure you are in the correct directory that contains .AVI files.</li> <li>Codec compatibility issues: If the .AVI files use codecs that are incompatible for conversion to H.264/AAC, it may be necessary to adjust codec parameters or investigate the codecs used in the source files.</li> <li>Permission denied: This issue can arise if you lack the necessary permissions to read the .AVI files or write the .MP4 files. Verify the permissions for both files and directories.</li> </ul>"},{"location":"ffmpeg-commands/batch-convert-avi-files-to-mp4/#additional-information","title":"Additional Information","text":"<ul> <li>Directory Navigation: Before executing the batch conversion command, navigate to the directory containing your .AVI files. Use <code>cd /path/to/directory</code> on Linux/macOS or <code>CD \\path\\to\\directory</code> on Windows.</li> <li>Quality Adjustment: The quality of the output video can be modified by altering the <code>-crf</code> value for the libx264 encoder (e.g., <code>-crf 23</code>). Lower values enhance quality and increase file size, whereas higher values reduce both.</li> <li>Audio Quality: To improve audio quality, adjust the bit rate using the <code>-b:a</code> option (e.g., <code>-b:a 192k</code>).</li> <li>Scripting: For convenience, consider saving these commands in a script file (e.g., `convert.sh</li> </ul>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/","title":"Capturing Webcam to a Video File","text":"<p>Record video from a webcam directly to a file using FFmpeg, allowing for easy creation of video content or video calls recordings.</p>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Capturing Webcam to a Video File\n    command: ffmpeg\n    inputs:\n      - id: input_2\n        source: '/dev/video0'\n    outputs:\n      - id: output_2\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - codec_name:\n          video: v4l2\n</code></pre>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/#command-linux","title":"Command (Linux)","text":"<pre><code>ffmpeg -f v4l2 -i /dev/video0 output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/#command-windows","title":"Command (Windows)","text":"<pre><code>ffmpeg -f dshow -i video=\"Your Webcam Name\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/#parameters-linux","title":"Parameters (Linux)","text":"<ul> <li><code>-f v4l2</code>: Specifies the video4linux2 (v4l2) format, used for capturing video on Linux systems.</li> <li><code>-i /dev/video0</code>: Indicates the input device, typically your webcam. <code>/dev/video0</code> is a common default, but this may vary depending on your system and number of video devices.</li> </ul>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/#parameters-windows","title":"Parameters (Windows)","text":"<ul> <li><code>-f dshow</code>: Specifies the DirectShow format, used for capturing video on Windows systems.</li> <li><code>-i video=\"Your Webcam Name\"</code>: Indicates the input device, which is your webcam. Replace <code>\"Your Webcam Name\"</code> with the exact name of your webcam, which can be found by running <code>ffmpeg -list_devices true -f dshow -i dummy</code>.</li> </ul>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/#possible-errors","title":"Possible Errors","text":"<ul> <li>Device not found: Occurs if FFmpeg cannot access the webcam device. Ensure the device path or name is correct and that your system grants access to the webcam.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to access the webcam. This can be due to privacy settings or permissions on your system.</li> <li>Unsupported format or codec: Happens if the output format or codec is not supported by the webcam or FFmpeg. Ensure the chosen codecs are compatible with your recording requirements and hardware capabilities.</li> </ul>"},{"location":"ffmpeg-commands/capturing-webcam-to-a-video-file/#additional-information","title":"Additional Information","text":"<ul> <li>Selecting the Right Device: On systems with multiple video devices, you may need to identify the correct device file (Linux) or device name (Windows). Use tools like <code>v4l2-ctl --list-devices</code> on Linux or the DirectShow command mentioned above on Windows to list available devices.</li> <li>Quality and File Size: You can control the quality and size of the output video by adjusting encoding parameters such as bit rate (<code>-b:v</code>) and resolution (<code>-s</code>). Higher quality settings will result in larger files.</li> <li>Audio Recording: To include audio in your recording, add an audio input source to your FFmpeg command. On Windows, for example, use <code>-f dshow -i audio=\"Your Microphone Name\"</code> alongside the video input.</li> <li>Privacy and Security: Ensure you have permission to record if capturing video in a setting with other individuals or sensitive information. Always be mindful of privacy and legal considerations.</li> </ul>"},{"location":"ffmpeg-commands/changing-audio-bit-rate/","title":"Changing Audio Bit Rate","text":"<p>Adjust the audio bit rate of a video or audio file using FFmpeg, allowing for modifications in audio quality and file size.</p>"},{"location":"ffmpeg-commands/changing-audio-bit-rate/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Changing Audio Bit Rate\n    command: ffmpeg\n    inputs:\n      - id: input_3\n        source: 'input.mp4'\n    outputs:\n      - id: output_3\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - constant_bitrate:\n          audio: 128k\n</code></pre>"},{"location":"ffmpeg-commands/changing-audio-bit-rate/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -b:a 128k output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/changing-audio-bit-rate/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input file. This can be either a video or an audio file. Replace <code>input.mp4</code> with the path to your source file.</li> <li><code>-b:a 128k</code>: Sets the audio bit rate to 128 kbps. Adjust <code>128k</code> to your desired audio bit rate.</li> </ul>"},{"location":"ffmpeg-commands/changing-audio-bit-rate/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Make sure the path to the file is correct.</li> <li>Invalid bit rate value: Happens if the specified audio bit rate is not recognized. Ensure the bit rate value is specified correctly, using <code>k</code> for kbps.</li> <li>Permission denied: Arises if FFmpeg does not have the required permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/changing-audio-bit-rate/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Changing the audio bit rate is a CPU-bound process, as it involves encoding audio streams rather than video. Therefore, there's no direct application of GPU acceleration for altering audio bit rates with FFmpeg. The focus is on the audio codec's performance, which is managed by the CPU:</p> <pre><code>ffmpeg -i input.mp4 -c:a aac -b:a 128k output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/changing-audio-bit-rate/#additional-information","title":"Additional Information","text":"<ul> <li>Audio Quality and File Size: The audio bit rate directly impacts the quality and size of the audio track. Higher bit rates mean better quality but larger file sizes, while lower bit rates can significantly reduce file size at the cost of audio quality.</li> <li>Choosing the Right Codec: Along with bit rate, the audio codec (e.g., AAC, MP3) plays a crucial role in determining the quality of the output audio. Some codecs are more efficient than others, offering better quality at lower bit rates.</li> <li>Compatibility: Ensure the selected audio codec and bit rate are compatible with the intended playback systems or platforms. This is especially important when optimizing for web streaming or devices with limited storage.</li> <li>Re-encoding: Changing the audio bit rate requires re-encoding the audio track. Consider the trade-off between file size and audio quality before deciding on the bit rate.</li> </ul>"},{"location":"ffmpeg-commands/changing-video-bit-rate/","title":"Changing Video Bit Rate","text":"<p>Adjust the bit rate of a video file using FFmpeg to change its size and quality, useful for optimizing videos for various bandwidths or storage constraints.</p>"},{"location":"ffmpeg-commands/changing-video-bit-rate/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Changing Video Bit Rate\n    command: ffmpeg\n    inputs:\n      - id: input_4\n        source: 'input.mp4'\n    outputs:\n      - id: output_4\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - constant_bitrate:\n          video: 1M\n</code></pre>"},{"location":"ffmpeg-commands/changing-video-bit-rate/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -b:v 1M output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/changing-video-bit-rate/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-b:v 1M</code>: Sets the video bit rate to 1 Mbps. Replace <code>1M</code> with your desired bit rate (e.g., <code>500k</code> for 500 kbps).</li> </ul>"},{"location":"ffmpeg-commands/changing-video-bit-rate/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid bit rate value: Occurs if the specified bit rate value is not recognized or is inappropriate for the video resolution or format. Ensure the bit rate value is specified in a valid format (e.g., <code>k</code> for kbps, <code>M</code> for Mbps).</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/changing-video-bit-rate/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Changing the video bit rate usually involves re-encoding, which can benefit from GPU acceleration. Here\u2019s how you can do it for Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -c:v h264_nvenc -b:v 1M output.mp4\n</code></pre> <p>Replace <code>h264_nvenc</code> with your GPU's specific hardware encoder (e.g., <code>hevc_nvenc</code> for HEVC) and adjust the bit rate as desired.</p>"},{"location":"ffmpeg-commands/changing-video-bit-rate/#additional-information","title":"Additional Information","text":"<ul> <li>Quality vs. Size: A higher bit rate generally results in better video quality but larger file sizes. Conversely, reducing the bit rate can significantly decrease file size at the cost of quality.</li> <li>Audio Bit Rate: To change the audio bit rate, use the <code>-b:a</code> option followed by the desired audio bit rate (e.g., <code>-b:a 128k</code> for 128 kbps). This can further reduce file size or adjust audio quality.</li> <li>Two-Pass Encoding: For more efficient bit rate utilization and consistent quality, consider using two-pass encoding. This process analyzes the video in the first pass and then adjusts the encoding to achieve the target bit rate more accurately in the second pass.</li> <li>Compatibility: Ensure the chosen video and audio bit rates are compatible with your intended playback devices or platforms, especially if you are optimizing for streaming or mobile devices.</li> </ul>"},{"location":"ffmpeg-commands/combining-videos/","title":"Combining Videos","text":"<p>Concatenate or join multiple video files into a single file using FFmpeg.</p>"},{"location":"ffmpeg-commands/combining-videos/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Combining Videos\n    command: ffmpeg\n    codecs:\n      - concat_files:\n          - source: 'input1.mp4'\n          - source: 'input2.mp4'\n    outputs:\n      - id: output_5\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/combining-videos/#command","title":"Command","text":"<p>For files with the same codecs:</p> <pre><code>ffmpeg -f concat -safe 0 -i input.txt -c copy output.mp4\n</code></pre> <p>For files that need re-encoding:</p> <pre><code>ffmpeg -i \"concat:input1.mp4|input2.mp4\" -c:v libx264 -c:a aac output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/combining-videos/#parameters","title":"Parameters","text":"<ul> <li><code>-f concat</code>: Specifies the use of the concat demuxer, which is required for combining files.</li> <li><code>-safe 0</code>: Allows the use of absolute file paths in the input file list.</li> <li><code>-i input.txt</code>: Specifies the input file, which contains a list of files to concatenate. <code>input.txt</code> should contain lines in the format: <code>file 'path/to/file1.mp4'</code> on each line.</li> <li><code>-c copy</code>: Copies the video and audio codecs from the input files without re-encoding. Use this option for fast processing when all input files have the same codecs.</li> <li><code>-c:v libx264 -c:a aac</code>: Specifies the video and audio codecs for re-encoding. Use this option if your input files have different codecs or formats.</li> </ul>"},{"location":"ffmpeg-commands/combining-videos/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate one of the input files. Ensure all paths in the input list are correct.</li> <li>Codec mismatch: Occurs if the input files have different codecs and <code>-c copy</code> is used. Ensure all input files use the same codecs or re-encode them using <code>-c:v</code> and <code>-c:a</code>.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input files or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/combining-videos/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Combining videos with GPU acceleration involves re-encoding. Here's an example for Nvidia GPUs:</p> <pre><code>ffmpeg -f concat -safe 0 -i input.txt -c:v h264_nvenc -c:a aac output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/combining-videos/#additional-information","title":"Additional Information","text":"<ul> <li>Input File Format: The input text file for the concat demuxer should list each file to concatenate on a new line, prefixed with <code>file '</code>, and followed by the file path and a closing <code>'</code>.</li> <li>Compatibility: Ensure all video files have the same resolution and frame rate before concatenating to avoid playback issues in the output file.</li> <li>Re-encoding: Re-encoding can affect video quality. To maintain quality, adjust bitrate or quality settings appropriately (e.g., using <code>-b:v</code> for video bitrate or <code>-crf</code> for constant rate factor with x264 and x265 codecs).</li> <li>Audio Sync: Pay attention to audio synchronization. Concatenating files with varying audio formats or settings can result in audio sync issues in the output file.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-series-of-images-to-a-timelapse-video/","title":"Convert a Series of Images to a Timelapse Video","text":"<p>Create a timelapse video from a sequence of images using FFmpeg, perfect for showcasing changes over time or creating stunning visual sequences from still photography.</p>"},{"location":"ffmpeg-commands/convert-a-series-of-images-to-a-timelapse-video/#command","title":"Command","text":"<pre><code>ffmpeg -framerate 24 -pattern_type glob -i 'images/*.jpg' -c:v libx264 -pix_fmt yuv420p timelapse.mp4\n</code></pre>"},{"location":"ffmpeg-commands/convert-a-series-of-images-to-a-timelapse-video/#parameters","title":"Parameters","text":"<ul> <li><code>-framerate 24</code>: Sets the frame rate for the output video. Adjust this value based on the desired speed of the timelapse and the number of images. A higher frame rate results in a faster timelapse.</li> <li><code>-pattern_type glob</code>: Enables the use of wildcard patterns for input file selection on systems that support it, facilitating the selection of all images in a directory.</li> <li><code>-i 'images/*.jpg'</code>: Specifies the input images. Replace <code>'images/*.jpg'</code> with the path and pattern matching your image files. Adjust the file extension as needed for different image formats.</li> <li><code>-c:v libx264</code>: Utilizes the H.264 codec for video encoding, offering a good compromise between quality and file size.</li> <li><code>-pix_fmt yuv420p</code>: Ensures the pixel format is compatible with most devices and video platforms.</li> <li><code>timelapse.mp4</code>: Names the output timelapse video file. Replace <code>timelapse.mp4</code> with your desired output file name.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-series-of-images-to-a-timelapse-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>No such file or directory: Occurs if FFmpeg cannot find the images based on the specified pattern. Ensure the path and pattern accurately match your image files.</li> <li>Unsupported pixel format: May occur if the chosen pixel format is not supported by the encoder or the output device. Confirm that <code>yuv420p</code> is compatible, or try a different pixel format.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input files or write to the output file. Verify that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-series-of-images-to-a-timelapse-video/#additional-information","title":"Additional Information","text":"<ul> <li>Image Naming: For a successful timelapse, ensure your images are named sequentially (e.g., <code>image001.jpg</code>, <code>image002.jpg</code>, ...). This guarantees they are processed in the correct order.</li> <li>Resolution and Aspect Ratio: The resolution of the output video will be the same as that of the input images. If your images vary in size or aspect ratio, consider using additional FFmpeg filters to scale or crop them for consistency.</li> <li>Quality Adjustments: To control the quality of the output video, you might use the <code>-crf</code> option with the libx264 codec (e.g., <code>-crf 23</code>). Lower values yield better quality at the expense of larger file sizes.</li> <li>Batch Processing: This command assumes all relevant images are in a single directory and of the same file type. If your images are spread across different directories or in various formats, organize them or adjust the command as necessary.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-video-to-grayscale/","title":"Convert a Video to Grayscale","text":"<p>Transform a color video into grayscale using FFmpeg, simplifying the visual content or creating a specific aesthetic effect.</p>"},{"location":"ffmpeg-commands/convert-a-video-to-grayscale/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Convert a Video to Grayscale\n    command: ffmpeg\n    inputs:\n      - id: input_7\n        source: 'input.mp4'\n    outputs:\n      - id: output_7\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - video_filters:\n          - name: format\n            value: gray\n</code></pre>"},{"location":"ffmpeg-commands/convert-a-video-to-grayscale/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"format=gray\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/convert-a-video-to-grayscale/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"format=gray\"</code>: Applies a video filter to convert the video format to grayscale, effectively removing color information from the video.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-video-to-grayscale/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the file path is correct.</li> <li>Invalid filter expression: Happens if the expression passed to the format filter is incorrect or unsupported. Ensure the syntax for the filter expression is correct.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-video-to-grayscale/#additional-information","title":"Additional Information","text":"<ul> <li>Quality Preservation: Converting to grayscale should not significantly alter the quality of the original video. However, consider specifying the codec and bitrate if you aim to maintain or adjust the video quality.</li> <li>Codec Consideration: For optimal compatibility and quality, use <code>-c:v libx264</code> to encode the output video in H.264. This is especially recommended if the video will be shared or viewed on various devices.</li> <li>Customizing the Output: In addition to converting to grayscale, you might want to adjust other aspects of the video, such as resolution or bitrate, to suit your needs better. For instance, use <code>-b:v 1M</code> to set the video bitrate to 1 Mbps.</li> <li>Audio Handling: This command retains the original audio track without changes. If you wish to modify the audio track (e.g., remove it or adjust the volume), include appropriate audio filters or codecs as needed.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-video-to-vertical/","title":"Convert a Video to Vertical","text":"<p>Transform a horizontal (landscape) video into a vertical (portrait) format using FFmpeg, making it suitable for platforms that prefer vertical content, such as social media stories or mobile viewing.</p>"},{"location":"ffmpeg-commands/convert-a-video-to-vertical/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Convert a Video to Vertical\n    command: ffmpeg\n    inputs:\n      - id: input_8\n        source: 'input.mp4'\n    outputs:\n      - id: output_8\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - video_filters:\n          - name: pad\n            value: ih*9/16:ih:(ow-iw)/2:0\n        codec_name:\n          audio: copy\n</code></pre>"},{"location":"ffmpeg-commands/convert-a-video-to-vertical/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"pad=ih*9/16:ih:(ow-iw)/2:0\" -c:a copy output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/convert-a-video-to-vertical/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"pad=ih*9/16:ih:(ow-iw)/2:0\"</code>: Applies the pad filter to adjust the video frame, creating a vertical video with a 9:16 aspect ratio. This command adds padding to the sides of the original video to fit the vertical aspect ratio, centering the video horizontally.</li> <li><code>-c:a copy</code>: Copies the original audio track without any changes.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-video-to-vertical/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the file path is correct.</li> <li>Invalid filter settings: Happens if the filter syntax is incorrect or results in an unsupported configuration. Ensure the formula for the padding and aspect ratio is applied correctly.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/convert-a-video-to-vertical/#additional-information","title":"Additional Information","text":"<ul> <li>Aspect Ratio Considerations: The provided command converts the video to a 9:16 aspect ratio, which is typical for vertical videos. Adjust the formula within the pad filter for different aspect ratios as needed.</li> <li>Quality and Resolution: Upscaling or padding the video can impact visual quality. Take into account the source video's resolution and the desired output resolution to ensure satisfactory quality.</li> <li>Black Bars: The padding will default to black bars. You can change the color by adding <code>:color=white</code> (or any other color) to the pad filter arguments.</li> <li>Audio Sync: The audio will remain unchanged and in sync with the video. If the video's duration changes as a result of the conversion process, verify that the audio still aligns as expected.</li> <li>Advanced Editing: For more complex transformations or to add background images instead of simple color padding, you may want to explore more advanced FFmpeg filters or editing software that offers greater control over the video layout.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-for-instagram/","title":"Convert Video for Instagram","text":"<p>Optimize and format videos for Instagram posting, ensuring compatibility with Instagram's video requirements for feed, stories, and IGTV.</p>"},{"location":"ffmpeg-commands/convert-video-for-instagram/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Convert Video for Instagram\n    command: ffmpeg\n    inputs:\n      - id: input_9\n        source: 'input.mp4'\n    outputs:\n      - id: output_9\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - video_filters:\n          - name: scale\n            value: 1080:1920\n          - name: setsar\n            value: 1:1\n        codec_name:\n          video: libx264\n          audio: aac\n        crf: 23\n        audio_bitrate: 128k\n        preset: veryfast\n        shortest: true\n</code></pre>"},{"location":"ffmpeg-commands/convert-video-for-instagram/#command-for-feed-and-stories","title":"Command for Feed and Stories","text":"<pre><code>ffmpeg -i input.mp4 -vf \"scale=1080:1920,setsar=1:1\" -c:v libx264 -preset veryfast -crf 23 -c:a aac -b:a 128k -shortest output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/convert-video-for-instagram/#command-for-igtv","title":"Command for IGTV","text":"<pre><code>ffmpeg -i input.mp4 -vf \"scale=720:1280,setsar=1:1\" -c:v libx264 -preset veryfast -crf 23 -c:a aac -b:a 128k -shortest output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/convert-video-for-instagram/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"scale=1080:1920,setsar=1:1\"</code> (for Feed and Stories) / <code>-vf \"scale=720:1280,setsar=1:1\"</code> (for IGTV): Sets the video filter for scaling the video to Instagram's preferred dimensions for feed and stories (1080x1920) or IGTV (720x1280) and sets the sample aspect ratio to 1:1 for square pixels.</li> <li><code>-c:v libx264</code>: Uses the H.264 codec for video encoding, providing broad compatibility.</li> <li><code>-preset veryfast</code>: Balances encoding speed and quality. Other presets can be used depending on CPU capability and desired output quality.</li> <li><code>-crf 23</code>: Sets the Constant Rate Factor to 23, offering a balance between quality and file size. Adjust as necessary for higher or lower quality.</li> <li><code>-c:a aac</code>: Sets the audio codec to AAC, ensuring broad compatibility.</li> <li><code>-b:a 128k</code>: Sets the audio bit rate to 128 kbps, offering good audio quality for most purposes.</li> <li><code>-shortest</code>: Ensures the output file's duration matches the shortest stream (usually the video), which is helpful when adding a static image or adjusting audio length.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-for-instagram/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid scale dimensions: Happens if the specified scaling dimensions are not supported by Instagram or the input file. Ensure the aspect ratio and resolution fit Instagram's guidelines.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-for-instagram/#additional-information","title":"Additional Information","text":"<ul> <li>Aspect Ratios and Dimensions: Instagram supports various aspect ratios and resolutions depending on the content type (feed, stories, IGTV). Check Instagram's current specifications as they may update over time.</li> <li>Quality and Compression: Adjusting the <code>-crf</code> value can help manage file size and quality. Lower values increase quality and file size, while higher values decrease them.</li> <li>Audio Sync: Pay attention to audio synchronization, especially if altering video length or combining clips. Test the output file to ensure audio remains in sync.</li> <li>Testing: Before posting, test the output video for playback on different devices if possible, to ensure compatibility and satisfactory visual quality.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-to-4k/","title":"Convert Video to 4K","text":"<p>Upscale a video to 4K resolution using FFmpeg, enhancing its visual quality for displays supporting 4K resolution.</p>"},{"location":"ffmpeg-commands/convert-video-to-4k/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Convert Video to 4K\n    command: ffmpeg\n    inputs:\n      - id: input_10\n        source: 'input.mp4'\n    outputs:\n      - id: output_10\n        overwrite: true\n        source: 'output.mp4'\n    codecs:\n      - video_filters:\n          - name: scale\n            value: 3840:2160\n</code></pre>"},{"location":"ffmpeg-commands/convert-video-to-4k/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"scale=3840:2160\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/convert-video-to-4k/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"scale=3840:2160\"</code>: Applies the scale video filter to resize the video to 4K resolution, which is 3840 by 2160 pixels.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-to-4k/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the file path is correct.</li> <li>Invalid scale settings: Happens if the specified resolution does not match the input video's aspect ratio. Adjust the scale parameters or consider adding padding to maintain the aspect ratio.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-to-4k/#additional-information","title":"Additional Information","text":"<ul> <li>Aspect Ratio Preservation: To maintain the original aspect ratio while scaling, use <code>-1</code> for one of the dimensions (e.g., <code>scale=3840:-1</code> or <code>scale=-1:2160</code>). FFmpeg will automatically calculate the other dimension.</li> <li>Quality Consideration: Upscaling to 4K may introduce visual artifacts or blur due to the increase in resolution. Consider using additional filters like <code>unsharp</code> for sharpening or <code>zscale</code> for high-quality scaling.</li> <li>Encoding Settings: To ensure high quality for the upscaled 4K video, use high-quality encoding settings, such as <code>-c:v libx264 -preset slow -crf 18</code> for H.264 encoding.</li> <li>Performance and File Size: Upscaling and encoding to 4K are resource-intensive processes and can result in large file sizes. Make sure your system has adequate processing power and disk space. Adjust encoding settings to find a balance between quality and file size.</li> <li>Audio Handling: This command focuses on video upscaling, and the audio stream will be copied without changes. If necessary, audio parameters can be adjusted with <code>-c:a</code> for codec and <code>-b:a</code> for bitrate.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-to-hls-format/","title":"Convert Video to HLS Format","text":"<p>Convert videos to HTTP Live Streaming (HLS) format using FFmpeg, enabling adaptive streaming over the web for various devices and network conditions.</p>"},{"location":"ffmpeg-commands/convert-video-to-hls-format/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Convert Video to HLS Format\n    command: ffmpeg\n    inputs:\n      - id: input_11\n        source: 'input.mp4'\n    outputs:\n      - id: output_11\n        overwrite: true\n        source: 'output.m3u8'\n    codecs:\n      - codec_name:\n          video: copy\n          audio: copy\n        hls:\n          time: 10\n          list_size: 0\n          start_number: 0\n</code></pre>"},{"location":"ffmpeg-commands/convert-video-to-hls-format/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -codec: copy -start_number 0 -hls_time 10 -hls_list_size 0 -f hls output.m3u8\n</code></pre>"},{"location":"ffmpeg-commands/convert-video-to-hls-format/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-codec: copy</code>: Copies both the video and audio codecs from the input file without re-encoding, preserving the original quality.</li> <li><code>-start_number 0</code>: Sets the starting segment number for the output HLS playlist.</li> <li><code>-hls_time 10</code>: Sets the maximum duration of each segment (in seconds). <code>10</code> seconds is a common choice for balancing file size and playback smoothness.</li> <li><code>-hls_list_size 0</code>: Specifies the maximum number of playlist entries. Setting it to <code>0</code> includes all segments in the playlist, allowing for unlimited playback duration.</li> <li><code>-f hls</code>: Sets the format to HLS for the output file.</li> <li><code>output.m3u8</code>: Specifies the name of the output HLS playlist file. Replace <code>output.m3u8</code> with your desired output file name.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-to-hls-format/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Incompatible codec for HLS: May occur if the input file's codec is not compatible with HLS. Consider re-encoding with <code>-codec:v libx264 -codec:a aac</code> for wider compatibility.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to write the output files. Check that the destination directory has the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/convert-video-to-hls-format/#additional-information","title":"Additional Information","text":"<ul> <li>Re-encoding for Compatibility: To ensure compatibility across all devices, you may need to re-encode your video to H.264/AAC. Use <code>-codec:v libx264 -codec:a aac</code> before the output file name.</li> <li>Segment Duration: Adjusting <code>-hls_time</code> affects the trade-off between download efficiency and the ability to adjust to changing network conditions. Shorter segments offer faster adaptation but can increase overhead.</li> <li>Encryption: For content protection, HLS supports AES-128 encryption. Use <code>-hls_key_info_file</code> followed by a path to a key info file to enable encryption.</li> <li>Bandwidth Adaptation: To create a multi-bitrate HLS stream, you will need to encode your input video at various bitrates and resolutions and then generate an HLS master playlist linking to the individual variant playlists.</li> <li>Audio-Only HLS: For audio-only streaming, you can omit video-related parameters and codecs, focusing on optimizing audio quality and compatibility.</li> </ul> <p>This markdown text provides a structured and detailed overview of the command for converting video to HLS format using FFmpeg, covering the syntax, parameters, possible errors, and additional information, all formatted in markdown.</p>"},{"location":"ffmpeg-commands/converting-a-video-to-gif/","title":"Converting a Video to GIF","text":"<p>Create a GIF from a video file using FFmpeg, ideal for short clips or animations.</p>"},{"location":"ffmpeg-commands/converting-a-video-to-gif/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1  # Schema version of viddo-compose\n\ngenerate_path: \"./generated\"  # Directory of log and command files\n\ntasks:\n  - name: Converting a Video to GIF\n    command: ffmpeg\n    inputs:\n      - id: input_12\n        source: 'input.mp4'\n    outputs:\n      - id: output_12\n        overwrite: true\n        source: 'output.gif'\n    codecs:\n      - video_filters:\n          - name: fps\n            value: 10\n          - name: scale\n            value: 320:-1\n            flags: lanczos\n        codec_name:\n          video: gif\n</code></pre>"},{"location":"ffmpeg-commands/converting-a-video-to-gif/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"fps=10,scale=320:-1:flags=lanczos\" -c:v gif output.gif\n</code></pre>"},{"location":"ffmpeg-commands/converting-a-video-to-gif/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"fps=10,scale=320:-1:flags=lanczos\"</code>: Applies video filters to set the frame rate to 10 frames per second, scale the width to 320 pixels while maintaining the aspect ratio, and use the Lanczos filter for scaling.</li> <li><code>-c:v gif</code>: Sets the video codec to GIF for the output file.</li> </ul>"},{"location":"ffmpeg-commands/converting-a-video-to-gif/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid filter settings: Occurs if the specified filter graph (e.g., scaling dimensions or fps) is not valid. Ensure the filter syntax and values are correct.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/converting-a-video-to-gif/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Converting a video to GIF primarily involves frame extraction and palette generation, processes which do not significantly benefit from GPU acceleration. Therefore, there is no direct GPU acceleration command for converting videos to GIFs with FFmpeg. However, for initial video processing steps (like decoding or scaling) before converting to a GIF, GPU acceleration can be utilized if necessary:</p> <p>For Nvidia GPUs (example of decoding with GPU, though the GIF conversion process itself is CPU-bound):</p> <pre><code>ffmpeg -hwaccel cuda -i input.mp4 -vf \"fps=10,scale=320:-1:flags=lanczos,format=rgb24\" -c:v gif output.gif\n</code></pre>"},{"location":"ffmpeg-commands/converting-a-video-to-gif/#additional-information","title":"Additional Information","text":"<ul> <li>Frame Rate (fps): Lowering the frame rate can reduce the GIF size. Adjust the <code>fps</code> value according to your needs.</li> <li>Scaling: Adjust the scale to control the GIF size and quality. Smaller dimensions result in smaller file sizes.</li> <li>Optimization: After creating a GIF, consider using tools like <code>gifsicle</code> for further optimization, which can reduce file size without significantly affecting quality.</li> <li>Palette Generation: For high-quality GIFs, consider using a two-pass approach where you first generate a palette based on the most common colors in the video and then use that palette to create the GIF. This is achieved with the <code>palettegen</code> and <code>paletteuse</code> filters in FFmpeg.</li> </ul>"},{"location":"ffmpeg-commands/converting-audio-files/","title":"Converting Audio Files","text":"<p>Convert audio files from one format to another using FFmpeg.</p>"},{"location":"ffmpeg-commands/converting-audio-files/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Converting Audio Files\n    command: ffmpeg\n    inputs:\n      - id: input_audio\n        source: 'input.wav'\n    outputs:\n      - id: output_audio\n        overwrite: true\n        source: 'output.mp3'\n</code></pre>"},{"location":"ffmpeg-commands/converting-audio-files/#command","title":"Command","text":"<pre><code>ffmpeg -i input.wav output.mp3\n</code></pre>"},{"location":"ffmpeg-commands/converting-audio-files/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.wav</code>: Specifies the input audio file. Replace <code>input.wav</code> with the path to your source audio file.</li> <li><code>output.mp3</code>: Specifies the output audio file. The extension of the output file determines the output format. Replace <code>output.mp3</code> with your desired output file name and format.</li> </ul>"},{"location":"ffmpeg-commands/converting-audio-files/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Unsupported codec: Occurs if the specified audio codec is not supported or not installed. Ensure that the desired audio format is supported.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/converting-audio-files/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Audio conversion typically does not benefit from GPU acceleration as it is primarily an audio processing task. However, if you are dealing with an audio file that requires decoding with GPU acceleration, you can use:</p> <p>For Nvidia GPUs:</p> <pre><code>ffmpeg -hwaccel cuda -i input.wav -c:a libmp3lame output.mp3\n</code></pre>"},{"location":"ffmpeg-commands/converting-audio-files/#additional-information","title":"Additional Information","text":"<ul> <li>Audio Formats: Common audio formats include MP3, AAC, WAV, and FLAC. The format is determined by the file extension of the output file.</li> <li>Re-encoding: If you need to re-encode the audio into a different format or adjust the bitrate, specify the desired audio codec with <code>-c:a</code> and set the bitrate with <code>-b:a</code> (e.g., <code>-c:a libmp3lame -b:a 192k</code> for MP3 at 192 kbps).</li> <li>Quality: When re-encoding, consider the trade-off between file size and audio quality. Higher bitrates generally result in better quality but larger file sizes.</li> <li>Metadata: To preserve metadata (e.g., artist, album, title) during conversion, use the <code>-map_metadata</code> option (e.g., <code>-map_metadata 0</code> to copy metadata from the first input file to the output file).</li> </ul>"},{"location":"ffmpeg-commands/converting-video-for-web/","title":"Converting Video for Web","text":"<p>Optimize and convert videos for web playback, ensuring compatibility and efficient loading across various browsers and devices using FFmpeg.</p>"},{"location":"ffmpeg-commands/converting-video-for-web/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Converting Video for Web\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - codec_name:\n          video: libx264\n          audio: aac\n        video_bitrate: 1M\n        audio_bitrate: 128k\n        preset: medium\n        move_flags: faststart\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/converting-video-for-web/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -c:v libx264 -preset medium -b:v 1M -c:a aac -b:a 128k -movflags +faststart output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/converting-video-for-web/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-c:v libx264</code>: Sets the video codec to H.264, widely supported across web browsers and devices.</li> <li><code>-preset medium</code>: Balances encoding speed and output quality. Other presets include <code>fast</code>, <code>slow</code>, and <code>veryfast</code>.</li> <li><code>-b:v 1M</code>: Sets the video bit rate to 1 Mbps. Adjust this rate based on your quality and bandwidth requirements.</li> <li><code>-c:a aac</code>: Sets the audio codec to AAC, ensuring broad compatibility.</li> <li><code>-b:a 128k</code>: Sets the audio bit rate to 128 kbps, offering a good balance between quality and file size.</li> <li><code>-movflags +faststart</code>: Moves some data to the beginning of your file, facilitating quicker playback start times when streamed online.</li> <li><code>output.mp4</code>: Specifies the name of the output video file. Replace <code>output.mp4</code> with your desired output file name.</li> </ul>"},{"location":"ffmpeg-commands/converting-video-for-web/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Unsupported codec: May occur if the selected codecs are not compatible with the input file's format. Ensure that the input file format supports the chosen codecs.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/converting-video-for-web/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>For faster encoding, especially useful for high-resolution videos, you can use GPU acceleration. For Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -c:v h264_nvenc -preset:v hq -b:v 1M -c:a aac -b:a 128k -movflags +faststart output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/converting-video-for-web/#additional-information","title":"Additional Information","text":"<ul> <li>Web Compatibility: The H.264 video codec and AAC audio codec combination offers broad compatibility with web browsers and mobile devices.</li> <li>Quality and File Size: Adjust the <code>-b:v</code> and <code>-b:a</code> parameters to find the right balance between video quality and file size. Lower bit rates result in smaller files but might reduce quality.</li> <li>Preset Options: The <code>-preset</code> parameter affects encoding speed and output file size; a slower preset offers better compression (smaller file size) at the cost of increased encoding time.</li> <li>Fast Start: The <code>-movflags +faststart</code> flag is crucial for web videos, allowing playback to begin before the file is fully downloaded, enhancing the user experience on streaming platforms.</li> </ul>"},{"location":"ffmpeg-commands/creating-a-thumbnail-from-a-video/","title":"Creating a Thumbnail from a Video","text":"<p>Generate a thumbnail image from a video file at a specific time frame using FFmpeg, useful for previews or video content indexing.</p>"},{"location":"ffmpeg-commands/creating-a-thumbnail-from-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Creating a Thumbnail from a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: select\n            value: 'eq(n\\,100)'\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.png'\n</code></pre>"},{"location":"ffmpeg-commands/creating-a-thumbnail-from-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -ss 00:01:00 -vframes 1 output.png\n</code></pre>"},{"location":"ffmpeg-commands/creating-a-thumbnail-from-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-ss 00:01:00</code>: Sets the timestamp for extracting the thumbnail. Replace <code>00:01:00</code> with your desired timestamp in hours:minutes:seconds format.</li> <li><code>-vframes 1</code>: Commands FFmpeg to output one video frame, thereby creating a single image.</li> <li><code>output.png</code>: Determines the name of the output thumbnail file. Replace <code>output.png</code> with your desired output file name and format.</li> </ul>"},{"location":"ffmpeg-commands/creating-a-thumbnail-from-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Make sure the file path is correct.</li> <li>Invalid timestamp: Happens if the specified timestamp is beyond the video's duration. Ensure the timestamp falls within the video's length.</li> <li>Permission denied: Arises if FFmpeg lacks the necessary permissions to read the input file or write to the output file. Verify that the files and directories have the appropriate permissions.</li> </ul>"},{"location":"ffmpeg-commands/creating-a-thumbnail-from-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Image Format: Different output formats (e.g., JPG, PNG) can be chosen based on your needs. PNG offers lossless compression, whereas JPEG may be preferred for its smaller file sizes or suitability for web use.</li> <li>Choosing the Right Frame: To select the most representative or visually appealing frame for the thumbnail, experiment with various timestamps.</li> <li>Batch Processing: For creating thumbnails for multiple videos, consider using a shell script (on Linux/macOS) or a batch file (on Windows) to iterate through video files and apply this FFmpeg command.</li> <li>Quality Adjustments: For formats like JPEG, the quality can be adjusted using the <code>-q:v</code> option (e.g., <code>-q:v 2</code> for high quality). Note that PNG uses lossless compression and does not have a quality setting.</li> <li>Resolution Adjustment: If a specific thumbnail size is required, incorporate the scale filter into your command (e.g., <code>-vf \"scale=320:-1\"</code> to set the width to 320 pixels while adjusting the height to maintain the aspect ratio).</li> </ul>"},{"location":"ffmpeg-commands/creating-a-video-from-images/","title":"Creating a Video from Images","text":"<p>Create a video file from a sequence of images using FFmpeg, ideal for timelapse videos or animations.</p>"},{"location":"ffmpeg-commands/creating-a-video-from-images/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Creating a Video from Images\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input%d.jpg'\n    codecs:\n      - input_framerate: 24\n        codec_name:\n          video: libx264\n        pixel_format: yuv420p\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/creating-a-video-from-images/#command","title":"Command","text":"<pre><code>ffmpeg -framerate 24 -i input%d.jpg -c:v libx264 -pix_fmt yuv420p output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/creating-a-video-from-images/#parameters","title":"Parameters","text":"<ul> <li><code>-framerate 24</code>: Specifies the frame rate of the output video. Replace <code>24</code> with your desired frame rate.</li> <li><code>-i input%d.jpg</code>: Specifies the input file pattern. <code>%d</code> acts as a placeholder for the sequence numbers of your images (e.g., <code>input1.jpg</code>, <code>input2.jpg</code>, ...). Replace <code>input</code> with the base name of your image files.</li> <li><code>-c:v libx264</code>: Sets the video codec for the output file to H.264, which is widely supported across devices and platforms.</li> <li><code>-pix_fmt yuv420p</code>: Sets the pixel format to <code>yuv420p</code>, ensuring compatibility with most devices and media players.</li> <li><code>output.mp4</code>: Specifies the name of the output video file. Replace <code>output.mp4</code> with your desired output file name and format.</li> </ul>"},{"location":"ffmpeg-commands/creating-a-video-from-images/#possible-errors","title":"Possible Errors","text":"<ul> <li>File sequence mismatch: Occurs if FFmpeg cannot find a continuous sequence of image files matching the specified pattern. Ensure your image files are named sequentially without gaps.</li> <li>Unsupported codec or format: Occurs if the specified codec or pixel format is not supported or incorrectly specified. Verify that you have the correct codec and pixel format for your output file.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input files or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/creating-a-video-from-images/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>While encoding to video, you can utilize GPU acceleration to speed up the process. Here\u2019s how you can do it for Nvidia GPUs:</p> <pre><code>ffmpeg -framerate 24 -i input%d.jpg -c:v h264_nvenc -pix_fmt yuv420p output.mp4\n</code></pre> <p>Replace <code>h264_nvenc</code> with your GPU's specific hardware encoder (e.g., <code>hevc_nvenc</code> for HEVC).</p>"},{"location":"ffmpeg-commands/creating-a-video-from-images/#additional-information","title":"Additional Information","text":"<ul> <li>Image Formats: You can use various image formats as input (e.g., PNG, JPEG). The choice of format can affect the quality and size of your output video.</li> <li>Frame Rate Adjustment: Adjusting the frame rate (<code>-framerate</code>) changes the playback speed of the resulting video. A higher frame rate results in smoother video, while a lower frame rate can create a fast-motion effect.</li> <li>Quality Control: To control the quality of the output video, use the <code>-crf</code> option with <code>-c:v libx264</code>. Lower values produce better quality at the expense of larger file sizes (e.g., <code>-crf 18</code> for high quality).</li> <li>Resolution Adjustment: If your images are of different sizes or if you wish to change the video resolution, you can use the <code>scale</code> video filter (e.g., <code>-vf \"scale=1920:1080\"</code> to set the video resolution to 1920x1080).</li> </ul>"},{"location":"ffmpeg-commands/cropping-videos/","title":"Cropping Videos","text":"<p>Crop video files to remove unwanted portions from the frame using FFmpeg.</p>"},{"location":"ffmpeg-commands/cropping-videos/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Cropping Videos\n    command: ffmpeg\n    inputs:\n      - id: input_video\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: crop\n            value: \"640:480:100:50\"\n    outputs:\n      - id: cropped_output\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/cropping-videos/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"crop=640:480:100:50\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/cropping-videos/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"crop=640:480:100:50\"</code>: Applies a video filter to crop the video. The <code>crop</code> filter syntax is <code>crop=width:height:x:y</code>, where <code>width</code> and <code>height</code> are the dimensions of the output video, and <code>x</code> and <code>y</code> are the top left coordinates of the crop area in the input video. Adjust these values to your desired cropping area.</li> <li><code>output.mp4</code>: Specifies the output video file. Replace <code>output.mp4</code> with your desired output file name.</li> </ul>"},{"location":"ffmpeg-commands/cropping-videos/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid crop dimensions: Occurs if the specified dimensions are not valid or if the crop area exceeds the boundaries of the input video. Ensure that the dimensions and coordinates are correct and within the range of the input video's size.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/cropping-videos/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Cropping with GPU acceleration can be performed using filters supported by your GPU. However, direct GPU-accelerated cropping commands vary based on the FFmpeg version and GPU. As a general approach for Nvidia GPUs, you can use:</p> <pre><code>ffmpeg -hwaccel cuda -i input.mp4 -vf \"crop=640:480:100:50\" -c:a copy output.mp4\n</code></pre> <p>Note: Ensure your FFmpeg build has been compiled with support for Nvidia CUDA or the relevant GPU acceleration hardware you're using. Direct GPU cropping might not be supported for all hardware, and using <code>-vf</code> with a hardware-accelerated encoder might be the most effective solution.</p>"},{"location":"ffmpeg-commands/cropping-videos/#additional-information","title":"Additional Information","text":"<ul> <li>Aspect Ratio: Be mindful of the aspect ratio when cropping videos. An improper aspect ratio can lead to stretched or squished playback.</li> <li>Quality: Cropping a video re-encodes it, which can affect quality. To maintain quality, use a high-quality codec and consider adjusting bitrate or quality settings (e.g., using <code>-crf</code> for x264 and x265 encoders).</li> <li>Audio: The command above copies the audio stream without changes. If needed, audio can be re-encoded or manipulated separately.</li> </ul>"},{"location":"ffmpeg-commands/extract-all-frames-from-a-video/","title":"Extract All Frames from a Video","text":"<p>Extract every frame from a video file as individual image files using FFmpeg, useful for detailed editing, analysis, or creating frame-by-frame animations.</p>"},{"location":"ffmpeg-commands/extract-all-frames-from-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Extract All Frames from a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output%d.png'\n</code></pre>"},{"location":"ffmpeg-commands/extract-all-frames-from-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 output%d.png\n</code></pre>"},{"location":"ffmpeg-commands/extract-all-frames-from-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>output%d.png</code>: Defines the pattern for the output image files. <code>%d</code> will be replaced by the frame number, creating a sequence of images.</li> </ul>"},{"location":"ffmpeg-commands/extract-all-frames-from-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: This error occurs if FFmpeg cannot locate the input file. Make sure the file path is correct.</li> <li>Disk space: Extracting all frames from a video requires a significant amount of disk space, which can be an issue for long videos or those with high frame rates. Ensure there is enough disk space available.</li> <li>Permission denied: Occurs if FFmpeg lacks the necessary permissions to write the output files. Verify that the destination directory has appropriate permissions.</li> </ul>"},{"location":"ffmpeg-commands/extract-all-frames-from-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Image Format: The example uses PNG for its lossless quality. Other formats like JPG can be used by changing the file extension in the output pattern, but it's important to consider the trade-offs in file size and quality.</li> <li>Frame Rate and Duration: The video's frame rate and duration should be considered, as high frame rates or long durations will produce many frames.</li> <li>Naming and Sorting: Using the <code>%d</code> pattern ensures frames are numbered sequentially, which helps with easy sorting and accessing individual frames.</li> <li>Storage Considerations: Given the potential for generating a large number of files, it's wise to plan the storage location carefully. Using an external drive or a directory with ample free space might be advisable.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/","title":"Extracting Audio from Video","text":"<p>Extract the audio stream from a video file and save it as a separate audio file using FFmpeg.</p>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Extracting Audio from Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - codec_name:\n          audio: copy\n        video_none: true\n    outputs:\n      - id: output_audio\n        overwrite: true\n        source: 'output.mp3'\n</code></pre>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#ffmpeg-command","title":"FFmpeg Command","text":"<pre><code>ffmpeg -i input.mp4 -vn -acodec copy output.mp3\n</code></pre>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#ffmpeg-parameters","title":"FFmpeg Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vn</code>: Disables video recording. This tells FFmpeg to only process the audio stream.</li> <li><code>-acodec copy</code>: Copies the audio codec from the input file without re-encoding. Replace <code>copy</code> with a specific audio codec (e.g., <code>libmp3lame</code> for MP3) if you want to re-encode the audio.</li> <li><code>output.mp3</code>: Specifies the output audio file. The extension of the output file determines the output format. Replace <code>output.mp3</code> with your desired output file name and format.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#ffmpeg-possible-errors","title":"FFmpeg Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Unsupported codec: Occurs if the specified audio codec is not supported or not installed. Ensure that the desired audio format is supported.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Extracting audio from video typically does not benefit from GPU acceleration as it is primarily an audio processing task. However, if you are dealing with a video file that requires decoding with GPU acceleration, you can use:</p> <p>For Nvidia GPUs:</p> <pre><code>ffmpeg -hwaccel cuda -i input.mp4 -vn -acodec copy output.mp3\n</code></pre>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#opencv","title":"OpenCV","text":"<pre><code>unfortunately we could not find a any way.\n</code></pre>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#gstreamer-command","title":"GStreamer Command","text":"<p>To extract audio using GStreamer, you can use the following command:</p> <pre><code>gst-launch-1.0 -e filesrc location=input.mp4 ! qtdemux ! audio/mpeg ! filesink location=output.mp3\n</code></pre>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#parameters-for-gstreamer","title":"Parameters for GStreamer","text":"<ul> <li><code>filesrc location=input.mp4</code>: Specifies the input video file.</li> <li><code>qtdemux</code>: Demultiplexes the file into its separate streams.</li> <li><code>audio/mpeg</code>: Filters for the audio stream.</li> <li><code>filesink location=output.mp3</code>: Specifies the output audio file.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#possible-errors-for-gstreamer","title":"Possible Errors for GStreamer","text":"<ul> <li>Pipeline error: If there's an issue with the pipeline configuration or a plugin is missing.</li> <li>Unsupported format: If the input or output formats are not supported by the installed GStreamer plugins.</li> <li>File access error: If there are permissions issues with the input or output files.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#libvlc-command","title":"libVLC Command","text":"<p>To extract audio using libVLC, the command line interface of VLC can be used as follows:</p> <pre><code>vlc -I dummy input.mp4 --sout=\"#transcode{acodec=mp3,ab=192}:std{access=file,mux=raw,dst=output.mp3}\" vlc://quit\n</code></pre>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#parameters-for-libvlc","title":"Parameters for libVLC","text":"<ul> <li><code>-I dummy</code>: Runs VLC without a GUI.</li> <li><code>--sout</code>: Specifies the transcoding and output options.</li> <li><code>acodec=mp3,ab=192</code>: Sets the audio codec to MP3 with a bitrate of 192 kbps.</li> <li><code>mux=raw</code>: Sets the muxer to raw audio.</li> <li><code>dst=output.mp3</code>: Specifies the output audio file.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#possible-errors-for-libvlc","title":"Possible Errors for libVLC","text":"<ul> <li>Codec issues: If the specified codec is not supported by VLC.</li> <li>Streaming errors: Issues related to network streaming if applicable.</li> <li>File access: If VLC cannot access the input or output file due to permissions or path errors.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#additional-information","title":"Additional Information","text":""},{"location":"ffmpeg-commands/extracting-audio-from-video/#ffmpeg","title":"FFmpeg","text":"<ul> <li>Audio Formats: Common audio formats include MP3, AAC, WAV, and FLAC. The format is determined by the file extension of the output file.</li> <li>Re-encoding: If you need to re-encode the audio into a different format or adjust the bitrate, specify the desired audio codec with <code>-acodec</code> and set the bitrate with <code>-ab</code> (e.g., <code>-acodec libmp3lame -ab 192k</code> for MP3 at 192 kbps).</li> <li>Quality: When re-encoding, consider the trade-off between file size and audio quality. Higher bitrates generally result in better quality but larger file sizes.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#gstreamer","title":"GStreamer","text":"<ul> <li>Flexibility: Highly flexible with a modular plugin architecture. Custom pipelines can be constructed for specific needs.</li> <li>Audio Processing: Offers extensive audio processing capabilities, including filtering and conversion.</li> <li>Documentation: Refer to the official GStreamer documentation for more complex pipelines and plugins.</li> </ul>"},{"location":"ffmpeg-commands/extracting-audio-from-video/#libvlc","title":"libVLC","text":"<ul> <li>Wide Format Support: libVLC supports a wide range of video and audio formats, benefiting from VLC's extensive format compatibility.</li> <li>Transcoding Capabilities: Offers powerful transcoding options for both audio and video streams.</li> <li>Advanced Features: Supports advanced features like streaming to network locations, media conversion, and more.</li> </ul>"},{"location":"ffmpeg-commands/extracting-images-from-video/","title":"Extracting Images from Video","text":"<p>Extract frames from a video file as individual image files using FFmpeg, useful for thumbnails or analysis.</p>"},{"location":"ffmpeg-commands/extracting-images-from-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Extracting Images from Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: fps\n            value: 1\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output%d.png'\n</code></pre>"},{"location":"ffmpeg-commands/extracting-images-from-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"fps=1\" output%d.png\n</code></pre>"},{"location":"ffmpeg-commands/extracting-images-from-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"fps=1\"</code>: Applies a video filter to extract one frame per second. Adjust the number after <code>fps=</code> to change the extraction rate (e.g., <code>fps=0.5</code> for one frame every 2 seconds).</li> <li><code>output%d.png</code>: Specifies the output file pattern. <code>%d</code> will be replaced by the frame number. Replace <code>output</code> with your desired base file name, and <code>.png</code> with your preferred image format if necessary.</li> </ul>"},{"location":"ffmpeg-commands/extracting-images-from-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid filter settings: Occurs if the specified filter graph (e.g., fps value) is not valid. Ensure the filter syntax and values are correct.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output directory. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/extracting-images-from-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Extracting images from a video is primarily a CPU-bound process, and GPU acceleration may not significantly improve performance. However, if decoding the input video is resource-intensive, GPU acceleration can be beneficial for this step:</p> <p>For Nvidia GPUs:</p> <pre><code>ffmpeg -hwaccel cuda -i input.mp4 -vf \"fps=1\" output%d.png\n</code></pre>"},{"location":"ffmpeg-commands/extracting-images-from-video/#additional-information","title":"Additional Information","text":"<ul> <li>Image Format: You can choose different image formats (e.g., jpg, png) based on your needs. PNG offers lossless compression, while JPEG might be preferable for smaller file sizes.</li> <li>Extraction Rate: Adjusting the <code>fps</code> value in the video filter allows for flexible control over how many frames are extracted. A lower value extracts fewer frames, suitable for longer videos or when only a few frames are needed.</li> <li>Frame Accurate Extraction: To extract specific frames, consider using the <code>select</code> filter (e.g., <code>-vf \"select=eq(n\\,100)\"</code> to extract only the 101st frame) for more precise control.</li> <li>Disk Space: Be mindful of disk space when extracting a large number of frames, especially at high resolutions or in lossless formats like PNG.</li> </ul>"},{"location":"ffmpeg-commands/increase-the-volume-of-a-video/","title":"Increase the Volume of a Video","text":"<p>Enhance the audio level within a video file using FFmpeg, ideal for videos with low audio levels or when you want to emphasize certain audio elements.</p>"},{"location":"ffmpeg-commands/increase-the-volume-of-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Increase the Volume of a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - audio_filters:\n          - name: volume\n            value: 2.0\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/increase-the-volume-of-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -filter:a \"volume=2.0\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/increase-the-volume-of-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-filter:a \"volume=2.0\"</code>: Applies an audio filter to adjust the volume. The value <code>2.0</code> doubles the current audio volume. Adjust this value as needed to increase or decrease the volume.</li> </ul>"},{"location":"ffmpeg-commands/increase-the-volume-of-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Make sure the file path is correct.</li> <li>Invalid filter expression: Happens if the expression passed to the volume filter is incorrect. Ensure the syntax for the filter expression is correct.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/increase-the-volume-of-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Volume Adjustment: The volume filter's value can be set to any decimal number. Values greater than <code>1.0</code> increase the volume, while values less than <code>1.0</code> decrease it.</li> <li>Clipping Warning: Significantly increasing the volume may lead to audio clipping, resulting in distortion. Use the volume filter judiciously and test the output to ensure audio quality.</li> <li>Normalization: If the goal is to achieve consistent volume levels across multiple videos, consider using the <code>loudnorm</code> filter for normalization.</li> <li>Dynamic Range Compression: For videos with a wide range of audio levels, applying dynamic range compression along with volume adjustment can maintain clarity without distortion.</li> </ul>"},{"location":"ffmpeg-commands/looping-a-video/","title":"Looping a Video","text":"<p>Create a looped version of a video file using FFmpeg, repeating the content for a specified number of times or duration.</p>"},{"location":"ffmpeg-commands/looping-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Looping a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - stream_loop: -1\n        codec_name:\n          video: copy\n          audio: copy\n        shortest: true\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/looping-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -stream_loop -1 -i input.mp4 -c copy -shortest output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/looping-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-stream_loop -1</code>: Loops the input video infinitely. Replace <code>-1</code> with a specific number (e.g., <code>5</code>) to loop the video a fixed number of times.</li> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-c copy</code>: Copies the video and audio streams without re-encoding, preserving the original quality.</li> <li><code>-shortest</code>: Makes the output file duration equal to the shortest input stream (useful when combining with audio that may not match the exact loop duration).</li> </ul>"},{"location":"ffmpeg-commands/looping-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Infinite loop: If the <code>-stream_loop</code> option is set to <code>-1</code> without setting a duration limit or using <code>-shortest</code>, FFmpeg may attempt to create an infinitely long file. Ensure your command includes appropriate limiting parameters.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/looping-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Looping a video involves primarily stream manipulation rather than encoding, so GPU acceleration does not directly apply. However, if you need to re-encode the video for any reason (e.g., changing format or size), you can incorporate GPU acceleration for the encoding process. For Nvidia GPUs:</p> <pre><code>ffmpeg -stream_loop -1 -i input.mp4 -c:v h264_nvenc -c:a copy -shortest output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/looping-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Audio Looping: If your video has audio, consider the audio length and how it aligns with the video loop. Misalignment may result in abrupt audio cuts or mismatches between video and audio loops.</li> <li>File Size: Looping a video multiple times will increase the file size proportionally. Consider this when planning storage or streaming bandwidth.</li> <li>Re-encoding vs. Copying: Using <code>-c copy</code> preserves quality but limits format changes. If you need to change the video or audio codec, specify the codec with <code>-c:v</code> for video and <code>-c:a</code> for audio, and be aware this will involve re-encoding.</li> <li>Complex Looping: For more complex looping scenarios, such as looping a segment of a video or integrating loops with non-looped content, you may need to use more advanced FFmpeg features or scripts to create the desired output.</li> </ul>"},{"location":"ffmpeg-commands/normalizing-audio-in-a-video/","title":"Normalizing Audio in a Video","text":"<p>Adjust the audio levels in a video file to a standard volume using FFmpeg, improving the listening experience by ensuring consistent audio playback levels.</p>"},{"location":"ffmpeg-commands/normalizing-audio-in-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Normalizing Audio in a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - audio_filters:\n          - name: loudnorm\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/normalizing-audio-in-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -filter:a loudnorm output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/normalizing-audio-in-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-filter:a loudnorm</code>: Applies the loudness normalization audio filter. This filter analyzes the audio to adjust its loudness to a target level.</li> </ul>"},{"location":"ffmpeg-commands/normalizing-audio-in-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Unsupported codec: May occur if the input or output format does not support the audio stream's codec. Ensure compatibility or consider transcoding the audio stream.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/normalizing-audio-in-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Audio normalization is a CPU-bound process, focusing on analyzing and adjusting audio levels. Therefore, GPU acceleration does not directly apply to this operation. However, if you're also performing video processing tasks that benefit from GPU acceleration, you can combine them as follows:</p> <p>For Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -filter:a loudnorm -c:v h264_nvenc output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/normalizing-audio-in-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Loudnorm Filter: The <code>loudnorm</code> filter performs loudness normalization according to the EBU R128 standard. It can be customized with various options (e.g., setting I, LRA, TP thresholds) to fine-tune the normalization process.</li> <li>Two-Pass Mode: For optimal results, <code>loudnorm</code> can run in a two-pass mode. The first pass analyzes the audio to determine the normalization parameters, and the second pass applies these parameters. This approach requires running two separate FFmpeg commands, where the first pass generates a log of parameters to be used in the second.</li> <li>Audio and Video Processing: While normalizing audio, you can simultaneously process the video track, including re-encoding, resizing, or applying filters. This consolidation can save processing time.</li> <li>Quality Considerations: If re-encoding the audio or video, choose codecs and settings that balance quality and file size according to your needs. For audio, options like codec choice (<code>-c:a</code>) and bit rate (<code>-b:a</code>) are crucial.</li> </ul>"},{"location":"ffmpeg-commands/resizing-videos/","title":"Resizing Videos","text":"<p>Resize video files to a different resolution using FFmpeg.</p>"},{"location":"ffmpeg-commands/resizing-videos/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n- name: Resizing Video\n  command: ffmpeg\n  inputs:\n    - id: input_video\n      source: 'input.mp4'\n      codecs:\n    - video_filters:\n        - name: scale\n          value: \"1280:720\"\n  outputs:\n    - id: resized_output\n      overwrite: true\n      source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/resizing-videos/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"scale=1280:720\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/resizing-videos/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"scale=1280:720\"</code>: Applies a video filter to scale the video to the specified width and height. Replace <code>1280:720</code> with your desired resolution.</li> <li><code>output.mp4</code>: Specifies the output video file. Replace <code>output.mp4</code> with your desired output file name.</li> </ul>"},{"location":"ffmpeg-commands/resizing-videos/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid scale dimensions: Occurs if the specified dimensions are not valid. Ensure that the width and height are positive integers.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/resizing-videos/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>For Nvidia GPUs, use:</p> <pre><code>ffmpeg -hwaccel cuda -i input.mp4 -vf \"scale_cuda=1280:720\" output.mp4\n</code></pre> <p>Note: GPU acceleration for video scaling may require specific hardware support and FFmpeg configurations.</p>"},{"location":"ffmpeg-commands/resizing-videos/#additional-information","title":"Additional Information","text":"<ul> <li>Aspect Ratio: To maintain the original aspect ratio while scaling, use <code>-1</code> for one of the dimensions (e.g., <code>scale=1280:-1</code> to scale the width to 1280 pixels and adjust the height proportionally).</li> <li>Quality: The quality of the resized video can be affected by the scaling algorithm. You can specify the scaling algorithm using the <code>flags</code> option (e.g., <code>scale=1280:720:flags=lanczos</code> for Lanczos resampling).</li> <li>Performance: Resizing videos can be computationally intensive. Using GPU acceleration (if available) can significantly speed up the process.</li> </ul>"},{"location":"ffmpeg-commands/reverse-a-video/","title":"Reverse a Video","text":"<p>Create a reversed playback effect for a video file using FFmpeg, making the video play backward, which can be used for creative effects or analysis.</p>"},{"location":"ffmpeg-commands/reverse-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Reverse a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: reverse\n      - audio_filters:\n          - name: areverse\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/reverse-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"reverse\" -af \"areverse\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/reverse-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"reverse\"</code>: Applies the reverse filter to reverse the video frames, playing the video backward.</li> <li><code>-af \"areverse\"</code>: Applies the reverse filter to the audio track, playing the audio backward in sync with the video.</li> </ul>"},{"location":"ffmpeg-commands/reverse-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Memory limitations: Reversing a video requires loading it into memory, which means extremely long or high-resolution videos might exceed system memory limits, leading to process failure.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/reverse-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Performance Consideration: The reverse filter is resource-intensive since it processes the entire video before outputting. Larger files are expected to have longer processing times.</li> <li>Quality Preservation: Reversing the video maintains the original quality. However, if adjustments to quality or file size are needed, consider using encoding parameters such as <code>-crf</code> for x264 and x265 codecs.</li> <li>Partial Reversing: To reverse only a portion of the video, you might use the trim, setpts, and asetpts filters to specify the segment before applying the reverse filters.</li> <li>Compatibility: Most media players and devices should be compatible with the reversed video. Nonetheless, testing the output is recommended to ensure it meets your specific needs, especially for use in web pages or other media.</li> </ul>"},{"location":"ffmpeg-commands/rotating-a-video/","title":"Rotating a Video","text":"<p>Rotate a video by 90, 180, or 270 degrees using FFmpeg, useful for correcting orientation after recording or for creative effects.</p>"},{"location":"ffmpeg-commands/rotating-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Rotating a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: transpose\n            value: 1\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/rotating-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"transpose=1\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/rotating-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"transpose=1\"</code>: Applies the transpose filter to rotate the video. The <code>transpose</code> parameter can take the following values:</li> <li><code>0</code>: Rotate by 90 degrees counterclockwise and vertically flip.</li> <li><code>1</code>: Rotate by 90 degrees clockwise.</li> <li><code>2</code>: Rotate by 90 degrees counterclockwise.</li> <li><code>3</code>: Rotate by 90 degrees clockwise and vertically flip.   Replace <code>1</code> with your desired rotation option.</li> </ul>"},{"location":"ffmpeg-commands/rotating-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid filter argument: Happens if an invalid argument is passed to the <code>transpose</code> filter. Ensure the value is within the valid range (0-3).</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/rotating-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Rotating a video is primarily a CPU-bound process due to the nature of the operation. While GPU acceleration is not directly applicable to the rotation itself, encoding the video during the process can benefit from GPU acceleration. For Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -vf \"transpose=1\" -c:v h264_nvenc output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/rotating-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Aspect Ratio: Rotating the video may change the aspect ratio. Consider adjusting the aspect ratio or scaling the video to maintain the original dimensions using additional filters like <code>scale</code>.</li> <li>Multiple Rotations: To rotate the video by 180 degrees or apply multiple rotations, you might chain the transpose filter (e.g., <code>-vf \"transpose=2,transpose=2\"</code> for 180 degrees).</li> <li>Quality: If re-encoding is required, consider specifying bitrate or quality settings to maintain high video quality. For example, use <code>-crf 20</code> with <code>-c:v libx264</code> for H.264 encoding.</li> <li>Audio: Rotating a video does not affect the audio track. If your video rotation results in an orientation change that impacts the viewing experience, consider if any adjustments to the audio channels are necessary.</li> </ul>"},{"location":"ffmpeg-commands/slowing-down-a-video/","title":"Slowing Down a Video","text":"<p>Decrease the playback speed of a video file using FFmpeg, ideal for detailed analyses or creating slow-motion effects.</p>"},{"location":"ffmpeg-commands/slowing-down-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Slowing Down a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: setpts\n            value: '2.0*PTS'\n        audio_none: true\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/slowing-down-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -filter:v \"setpts=2.0*PTS\" -an output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/slowing-down-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-filter:v \"setpts=2.0*PTS\"</code>: Applies a video filter to adjust the presentation timestamps (PTS) of the video frames, effectively halving the speed of the video. The factor <code>2.0</code> increases the interval between frames, slowing down the video. Adjust this value to control the speed reduction (e.g., <code>4.0</code> for quarter speed).</li> <li><code>-an</code>: Removes the audio track from the output video. Slowing the video without adjusting the audio can result in desynchronization.</li> </ul>"},{"location":"ffmpeg-commands/slowing-down-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid filter expression: Happens if the expression passed to the <code>setpts</code> filter is incorrect. Ensure the syntax for the filter expression is correct.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/slowing-down-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>While adjusting playback speed is a process handled by altering frame presentation times and does not directly benefit from GPU acceleration, encoding the video during the process can utilize GPU acceleration. For Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -filter:v \"setpts=2.0*PTS\" -c:v h264_nvenc -an output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/slowing-down-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Audio Speed Adjustment: If you wish to maintain the audio and adjust its speed to match the video slowdown, you can use the <code>atempo</code> audio filter. Note that <code>atempo</code> has a limited range (0.5 to 2.0), and multiple filters may be chained for greater speed reductions (e.g., <code>-filter:a \"atempo=0.5,atempo=0.5\"</code> for quarter speed).</li> <li>Quality Considerations: Slowing down a video may require re-encoding, which can affect quality. To maintain high quality, specify encoding options such as <code>-crf</code> for x264 and x265 codecs to balance between quality and file size.</li> <li>Frame Rate Adjustment: For significant slowdowns, the video may appear choppy due to the reduced effective frame rate. Consider interpolating frames using filters like <code>minterpolate</code> to achieve smoother slow-motion effects.</li> <li>Complex Filter Graphs: For advanced slowdown effects, especially when adjusting both video and audio in sync, use the <code>-filter_complex</code> option to handle both streams within a single command effectively.</li> </ul>"},{"location":"ffmpeg-commands/speeding-up-a-video/","title":"Speeding Up a Video","text":"<p>Increase the playback speed of a video file using FFmpeg, useful for creating time-lapse effects or summarizing content.</p>"},{"location":"ffmpeg-commands/speeding-up-a-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Speeding Up a Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: setpts\n            value: '0.5*PTS'\n        audio_none: true\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/speeding-up-a-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -filter:v \"setpts=0.5*PTS\" -an output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/speeding-up-a-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-filter:v \"setpts=0.5*PTS\"</code>: Applies a video filter to adjust the presentation timestamps (PTS) of the video frames, effectively doubling the speed of the video. The factor <code>0.5</code> decreases the interval between frames to half, speeding up the video. Adjust this value to control the speed (e.g., <code>0.25</code> for 4x speed).</li> <li><code>-an</code>: Removes the audio track from the output video. This is often necessary because changing video speed without adjusting audio can lead to desynchronization.</li> </ul>"},{"location":"ffmpeg-commands/speeding-up-a-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid filter expression: Happens if the expression passed to the <code>setpts</code> filter is incorrect. Ensure the syntax for the filter expression is correct.</li> <li>Permission denied: Arises if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Check that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/speeding-up-a-video/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Speed adjustments are typically handled by altering the frame presentation times, a process that is not directly accelerated by GPUs. However, if re-encoding is required, GPU acceleration can be utilized for the encoding step. For Nvidia GPUs:</p> <pre><code>ffmpeg -i input.mp4 -filter:v \"setpts=0.5*PTS\" -c:v h264_nvenc -an output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/speeding-up-a-video/#additional-information","title":"Additional Information","text":"<ul> <li>Maintaining Audio: If you wish to keep the audio and adjust its speed to match the video, you can use the <code>atempo</code> audio filter. Note that <code>atempo</code> has a limited range (0.5 to 2.0), and multiple filters may be chained for greater speed changes (e.g., <code>-filter:a \"atempo=2.0,atempo=2.0\"</code> for 4x speed).</li> <li>Quality Preservation: Speeding up video may require re-encoding, which can affect quality. Consider specifying quality-related encoding options (e.g., <code>-crf</code> for x264 and x265) to balance speed and quality.</li> <li>Frame Rate Consideration: Increasing the speed reduces the effective frame rate. For significant speed increases, consider adjusting the frame rate with the <code>-r</code> option to maintain smooth playback.</li> <li>Complex Filter Graphs: For advanced speed adjustments, especially when maintaining audio, consider using a complex filter graph with the <code>-filter_complex</code> option to manipulate both video and audio in a single command.</li> </ul>"},{"location":"ffmpeg-commands/stabilize-a-shaky-video/","title":"Stabilize a Shaky Video","text":"<p>Stabilize shaky video footage using FFmpeg's <code>deshake</code> filter, improving the viewing experience by reducing unwanted camera movements.</p>"},{"location":"ffmpeg-commands/stabilize-a-shaky-video/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Stabilize a Shaky Video\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - video_filters:\n          - name: deshake\n    outputs:\n      - id: output_1\n        overwrite: true\n        source: 'output.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/stabilize-a-shaky-video/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -vf \"deshake\" output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/stabilize-a-shaky-video/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-vf \"deshake\"</code>: Applies the deshake video filter to stabilize the video.</li> </ul>"},{"location":"ffmpeg-commands/stabilize-a-shaky-video/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the file path is correct.</li> <li>Filter processing error: Happens if the deshake filter encounters an issue during the video processing, potentially due to unusual video formats or extreme shakiness. Examine the video properties or consider adjusting filter options.</li> <li>Permission denied: Arises if FFmpeg lacks the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/stabilize-a-shaky-video/#additional-information","title":"Additional Information","text":"<ul> <li>Filter Options: The deshake filter offers several options to customize the stabilization process, such as <code>rx</code>, <code>ry</code> (maximum allowed movement), and <code>edge</code> (handling of video edges). For example: <code>-vf \"deshake=rx=10:ry=10\"</code>.</li> <li>Performance Consideration: Video stabilization is computationally demanding, particularly for videos that are high-resolution or long. Take into account the processing capability of your system and the size of your video.</li> <li>Quality Preservation: Although stabilization can significantly enhance the usability of shaky footage, it may also lead to slight cropping or quality loss. Assess the output to ensure it aligns with your standards.</li> <li>Alternative Stabilization Tools: For videos requiring more advanced stabilization, consider using dedicated video editing software that offers more sophisticated stabilization features, as the deshake filter may not effectively handle all types of camera motion.</li> </ul>"},{"location":"ffmpeg-commands/streaming-video-to-youtube/","title":"Streaming Video to YouTube","text":"<p>Use FFmpeg to stream live video content directly to YouTube, enabling real-time broadcasting of events, presentations, or personal streams.</p>"},{"location":"ffmpeg-commands/streaming-video-to-youtube/#videoalchemy-compos-file","title":"VideoAlchemy Compos File","text":"<pre><code>version: 1\n\ngenerate_path: \"./generated\"\n\ntasks:\n  - name: Streaming Video to YouTube\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'input.mp4'\n    codecs:\n      - codec_name:\n          video: libx264\n          audio: aac\n        video_bitrate: 3000k\n        audio_bitrate: 160k\n        audio_sampling_rate: 44100\n        preset: veryfast\n        maxrate: 3000k\n        bufsize: 6000k\n        pix_fmt: yuv420p\n        g: 50\n    outputs:\n      - id: output_1\n        overwrite: true\n        format: flv\n        source: 'rtmp://a.rtmp.youtube.com/live2/your-stream-key'\n</code></pre>"},{"location":"ffmpeg-commands/streaming-video-to-youtube/#command","title":"Command","text":"<pre><code>ffmpeg -re -i input.mp4 -c:v libx264 -preset veryfast -maxrate 3000k -bufsize 6000k -pix_fmt yuv420p -g 50 -c:a aac -b:a 160k -ar 44100 -f flv rtmp://a.rtmp.youtube.com/live2/your-stream-key\n</code></pre>"},{"location":"ffmpeg-commands/streaming-video-to-youtube/#parameters","title":"Parameters","text":"<ul> <li><code>-re</code>: Reads the input file at its native frame rate, simulating live streaming.</li> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-c:v libx264</code>: Uses the H.264 codec for video encoding, widely supported for streaming.</li> <li><code>-preset veryfast</code>: Sets a balance between encoding speed and quality. Other presets can be used depending on CPU capability.</li> <li><code>-maxrate 3000k</code>: Sets the maximum video bit rate, which helps control the stream's quality and bandwidth usage.</li> <li><code>-bufsize 6000k</code>: Sets the buffer size, which can affect video quality and stability of the stream.</li> <li><code>-pix_fmt yuv420p</code>: Ensures the pixel format is compatible with YouTube and most other services.</li> <li><code>-g 50</code>: Sets the group of pictures (GOP) size, affecting video quality and keyframe frequency.</li> <li><code>-c:a aac</code>: Uses the AAC codec for audio encoding, recommended for YouTube.</li> <li><code>-b:a 160k</code>: Sets the audio bit rate, balancing audio quality and bandwidth usage.</li> <li><code>-ar 44100</code>: Sets the audio sampling rate, standard for high-quality audio.</li> <li><code>-f flv</code>: Sets the output format to FLV, compatible with YouTube's RTMP servers.</li> <li><code>rtmp://a.rtmp.youtube.com/live2/your-stream-key</code>: Specifies the YouTube RTMP server and your unique stream key. Replace <code>your-stream-key</code> with your actual YouTube stream key.</li> </ul>"},{"location":"ffmpeg-commands/streaming-video-to-youtube/#possible-errors","title":"Possible Errors","text":"<ul> <li>Connection refused or failed: Occurs if there's an issue connecting to YouTube's servers. Ensure your stream key is correct and your internet connection is stable.</li> <li>Invalid input or codec parameters: Happens if the input file or specified codecs are not compatible with YouTube's streaming requirements. Double-check your command parameters.</li> <li>Permission denied: Can arise if there are restrictions preventing FFmpeg from accessing network resources. Check your firewall settings or network permissions.</li> </ul>"},{"location":"ffmpeg-commands/streaming-video-to-youtube/#additional-information","title":"Additional Information","text":"<ul> <li>Stream Key Security: Keep your stream key private, as anyone with the key can stream to your channel.</li> <li>Internet Bandwidth: Ensure your internet connection has sufficient upload bandwidth to support the chosen bit rate comfortably. Test your connection speed if unsure.</li> <li>Audio-Video Sync: Streaming, especially at higher qualities or over unstable connections, can lead to AV sync issues. Monitor your stream and adjust parameters as necessary.</li> <li>Latency: YouTube live streaming has inherent latency. Choose the appropriate latency setting in your YouTube live dashboard to balance interaction and stream quality.</li> </ul>"},{"location":"ffmpeg-commands/trimming-videos/","title":"Trimming Videos","text":"<p>Trim or cut a portion of a video file to a specific start and end time using FFmpeg.</p>"},{"location":"ffmpeg-commands/trimming-videos/#videoalchemy-compose-file","title":"VideoAlchemy Compose File","text":"<pre><code>tasks:\n  - name: Trimming Videos\n    command: ffmpeg\n    inputs:\n      - id: input_1\n        source: 'sample/inputs/SampleVideo_1280x720_30mb.mp4'\n    codecs:\n      - time_part:\n          start_time: \"00:00:10.000\"\n          end_time: \"00:00:20.000\"\n    outputs:\n      - id: trim_video\n        overwrite: true\n        source: 'sample/outputs/trim.mp4'\n</code></pre>"},{"location":"ffmpeg-commands/trimming-videos/#command","title":"Command","text":"<pre><code>ffmpeg -i input.mp4 -ss 00:01:00 -to 00:02:00 -c copy output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/trimming-videos/#parameters","title":"Parameters","text":"<ul> <li><code>-i input.mp4</code>: Specifies the input video file. Replace <code>input.mp4</code> with the path to your source video file.</li> <li><code>-ss 00:01:00</code>: Sets the start time for trimming. Replace <code>00:01:00</code> with your desired start time in hours:minutes:seconds format.</li> <li><code>-to 00:02:00</code>: Sets the end time for trimming. Replace <code>00:02:00</code> with your desired end time in hours:minutes:seconds format. The duration of the output video will be from <code>-ss</code> to <code>-to</code>.</li> <li><code>-c copy</code>: Copies the video and audio codecs from the input file without re-encoding. This option provides fast trimming but may not be frame-accurate for certain codecs.</li> </ul>"},{"location":"ffmpeg-commands/trimming-videos/#possible-errors","title":"Possible Errors","text":"<ul> <li>File not found: Occurs if FFmpeg cannot locate the input file. Ensure the path to the file is correct.</li> <li>Invalid time duration: Occurs if the specified start or end time is beyond the duration of the input video. Ensure the time values are within the range of the video's length.</li> <li>Permission denied: Occurs if FFmpeg does not have the necessary permissions to read the input file or write to the output file. Ensure that the files and directories have the correct permissions.</li> </ul>"},{"location":"ffmpeg-commands/trimming-videos/#gpu-acceleration-command","title":"GPU Acceleration Command","text":"<p>Trimming videos typically does not benefit directly from GPU acceleration as the operation involves cutting sections of the video stream without processing the video data. However, if you need to re-encode the video, GPU acceleration can be beneficial:</p> <p>For Nvidia GPUs, use:</p> <pre><code>ffmpeg -hwaccel cuda -i input.mp4 -ss 00:01:00 -to 00:02:00 -c:v h264_nvenc -c:a copy output.mp4\n</code></pre>"},{"location":"ffmpeg-commands/trimming-videos/#additional-information","title":"Additional Information","text":"<ul> <li>Accuracy vs. Speed: Using <code>-c copy</code> with <code>-ss</code> and <code>-to</code> provides fast trimming but may not be accurate for all video formats due to keyframe placement. For more accuracy, place <code>-ss</code> and <code>-to</code> before <code>-i</code> and remove <code>-c copy</code>, but be aware this will re-encode the video and take longer.</li> <li>Re-encoding: If you need to adjust video quality or format, remove <code>-c copy</code> and specify encoding options (e.g., <code>-c:v libx264 -crf 20</code> for x264 video codec with a constant rate factor of 20).</li> <li>Audio Sync: Ensure audio remains in sync with the video after trimming. In most cases, <code>-c copy</code> maintains sync, but re-encoding may sometimes be necessary if issues arise.</li> </ul>"}]}